// a10s_ghrd_altera_mm_interconnect_181_wrkfuuy.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module a10s_ghrd_altera_mm_interconnect_181_wrkfuuy (
		input  wire [3:0]   arria10_hps_h2f_axi_master_awid,                       //                      arria10_hps_h2f_axi_master.awid
		input  wire [31:0]  arria10_hps_h2f_axi_master_awaddr,                     //                                                .awaddr
		input  wire [3:0]   arria10_hps_h2f_axi_master_awlen,                      //                                                .awlen
		input  wire [2:0]   arria10_hps_h2f_axi_master_awsize,                     //                                                .awsize
		input  wire [1:0]   arria10_hps_h2f_axi_master_awburst,                    //                                                .awburst
		input  wire [1:0]   arria10_hps_h2f_axi_master_awlock,                     //                                                .awlock
		input  wire [3:0]   arria10_hps_h2f_axi_master_awcache,                    //                                                .awcache
		input  wire [2:0]   arria10_hps_h2f_axi_master_awprot,                     //                                                .awprot
		input  wire [4:0]   arria10_hps_h2f_axi_master_awuser,                     //                                                .awuser
		input  wire         arria10_hps_h2f_axi_master_awvalid,                    //                                                .awvalid
		output wire         arria10_hps_h2f_axi_master_awready,                    //                                                .awready
		input  wire [3:0]   arria10_hps_h2f_axi_master_wid,                        //                                                .wid
		input  wire [63:0]  arria10_hps_h2f_axi_master_wdata,                      //                                                .wdata
		input  wire [7:0]   arria10_hps_h2f_axi_master_wstrb,                      //                                                .wstrb
		input  wire         arria10_hps_h2f_axi_master_wlast,                      //                                                .wlast
		input  wire         arria10_hps_h2f_axi_master_wvalid,                     //                                                .wvalid
		output wire         arria10_hps_h2f_axi_master_wready,                     //                                                .wready
		output wire [3:0]   arria10_hps_h2f_axi_master_bid,                        //                                                .bid
		output wire [1:0]   arria10_hps_h2f_axi_master_bresp,                      //                                                .bresp
		output wire         arria10_hps_h2f_axi_master_bvalid,                     //                                                .bvalid
		input  wire         arria10_hps_h2f_axi_master_bready,                     //                                                .bready
		input  wire [3:0]   arria10_hps_h2f_axi_master_arid,                       //                                                .arid
		input  wire [31:0]  arria10_hps_h2f_axi_master_araddr,                     //                                                .araddr
		input  wire [3:0]   arria10_hps_h2f_axi_master_arlen,                      //                                                .arlen
		input  wire [2:0]   arria10_hps_h2f_axi_master_arsize,                     //                                                .arsize
		input  wire [1:0]   arria10_hps_h2f_axi_master_arburst,                    //                                                .arburst
		input  wire [1:0]   arria10_hps_h2f_axi_master_arlock,                     //                                                .arlock
		input  wire [3:0]   arria10_hps_h2f_axi_master_arcache,                    //                                                .arcache
		input  wire [2:0]   arria10_hps_h2f_axi_master_arprot,                     //                                                .arprot
		input  wire [4:0]   arria10_hps_h2f_axi_master_aruser,                     //                                                .aruser
		input  wire         arria10_hps_h2f_axi_master_arvalid,                    //                                                .arvalid
		output wire         arria10_hps_h2f_axi_master_arready,                    //                                                .arready
		output wire [3:0]   arria10_hps_h2f_axi_master_rid,                        //                                                .rid
		output wire [63:0]  arria10_hps_h2f_axi_master_rdata,                      //                                                .rdata
		output wire [1:0]   arria10_hps_h2f_axi_master_rresp,                      //                                                .rresp
		output wire         arria10_hps_h2f_axi_master_rlast,                      //                                                .rlast
		output wire         arria10_hps_h2f_axi_master_rvalid,                     //                                                .rvalid
		input  wire         arria10_hps_h2f_axi_master_rready,                     //                                                .rready
		input  wire         clk_100_clk_clk,                                       //                                     clk_100_clk.clk
		input  wire         arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset, // arria10_hps_h2f_axi_reset_reset_bridge_in_reset.reset
		input  wire         onchip_memory2_reset1_reset_bridge_in_reset_reset,     //     onchip_memory2_reset1_reset_bridge_in_reset.reset
		output wire [2:0]   msgdma_0_csr_address,                                  //                                    msgdma_0_csr.address
		output wire         msgdma_0_csr_write,                                    //                                                .write
		output wire         msgdma_0_csr_read,                                     //                                                .read
		input  wire [31:0]  msgdma_0_csr_readdata,                                 //                                                .readdata
		output wire [31:0]  msgdma_0_csr_writedata,                                //                                                .writedata
		output wire [3:0]   msgdma_0_csr_byteenable,                               //                                                .byteenable
		output wire         msgdma_0_descriptor_slave_write,                       //                       msgdma_0_descriptor_slave.write
		output wire [127:0] msgdma_0_descriptor_slave_writedata,                   //                                                .writedata
		output wire [15:0]  msgdma_0_descriptor_slave_byteenable,                  //                                                .byteenable
		input  wire         msgdma_0_descriptor_slave_waitrequest,                 //                                                .waitrequest
		output wire [2:0]   msgdma_1_csr_address,                                  //                                    msgdma_1_csr.address
		output wire         msgdma_1_csr_write,                                    //                                                .write
		output wire         msgdma_1_csr_read,                                     //                                                .read
		input  wire [31:0]  msgdma_1_csr_readdata,                                 //                                                .readdata
		output wire [31:0]  msgdma_1_csr_writedata,                                //                                                .writedata
		output wire [3:0]   msgdma_1_csr_byteenable,                               //                                                .byteenable
		output wire         msgdma_1_descriptor_slave_write,                       //                       msgdma_1_descriptor_slave.write
		output wire [127:0] msgdma_1_descriptor_slave_writedata,                   //                                                .writedata
		output wire [15:0]  msgdma_1_descriptor_slave_byteenable,                  //                                                .byteenable
		input  wire         msgdma_1_descriptor_slave_waitrequest,                 //                                                .waitrequest
		output wire [17:0]  onchip_memory2_s1_address,                             //                               onchip_memory2_s1.address
		output wire         onchip_memory2_s1_write,                               //                                                .write
		input  wire [7:0]   onchip_memory2_s1_readdata,                            //                                                .readdata
		output wire [7:0]   onchip_memory2_s1_writedata,                           //                                                .writedata
		output wire         onchip_memory2_s1_chipselect,                          //                                                .chipselect
		output wire         onchip_memory2_s1_clken                                //                                                .clken
	);

	wire   [31:0] msgdma_0_csr_agent_m0_readdata;                                // msgdma_0_csr_translator:uav_readdata -> msgdma_0_csr_agent:m0_readdata
	wire          msgdma_0_csr_agent_m0_waitrequest;                             // msgdma_0_csr_translator:uav_waitrequest -> msgdma_0_csr_agent:m0_waitrequest
	wire          msgdma_0_csr_agent_m0_debugaccess;                             // msgdma_0_csr_agent:m0_debugaccess -> msgdma_0_csr_translator:uav_debugaccess
	wire   [31:0] msgdma_0_csr_agent_m0_address;                                 // msgdma_0_csr_agent:m0_address -> msgdma_0_csr_translator:uav_address
	wire    [3:0] msgdma_0_csr_agent_m0_byteenable;                              // msgdma_0_csr_agent:m0_byteenable -> msgdma_0_csr_translator:uav_byteenable
	wire          msgdma_0_csr_agent_m0_read;                                    // msgdma_0_csr_agent:m0_read -> msgdma_0_csr_translator:uav_read
	wire          msgdma_0_csr_agent_m0_readdatavalid;                           // msgdma_0_csr_translator:uav_readdatavalid -> msgdma_0_csr_agent:m0_readdatavalid
	wire          msgdma_0_csr_agent_m0_lock;                                    // msgdma_0_csr_agent:m0_lock -> msgdma_0_csr_translator:uav_lock
	wire   [31:0] msgdma_0_csr_agent_m0_writedata;                               // msgdma_0_csr_agent:m0_writedata -> msgdma_0_csr_translator:uav_writedata
	wire          msgdma_0_csr_agent_m0_write;                                   // msgdma_0_csr_agent:m0_write -> msgdma_0_csr_translator:uav_write
	wire    [2:0] msgdma_0_csr_agent_m0_burstcount;                              // msgdma_0_csr_agent:m0_burstcount -> msgdma_0_csr_translator:uav_burstcount
	wire          msgdma_0_csr_agent_rf_source_valid;                            // msgdma_0_csr_agent:rf_source_valid -> msgdma_0_csr_agent_rsp_fifo:in_valid
	wire  [126:0] msgdma_0_csr_agent_rf_source_data;                             // msgdma_0_csr_agent:rf_source_data -> msgdma_0_csr_agent_rsp_fifo:in_data
	wire          msgdma_0_csr_agent_rf_source_ready;                            // msgdma_0_csr_agent_rsp_fifo:in_ready -> msgdma_0_csr_agent:rf_source_ready
	wire          msgdma_0_csr_agent_rf_source_startofpacket;                    // msgdma_0_csr_agent:rf_source_startofpacket -> msgdma_0_csr_agent_rsp_fifo:in_startofpacket
	wire          msgdma_0_csr_agent_rf_source_endofpacket;                      // msgdma_0_csr_agent:rf_source_endofpacket -> msgdma_0_csr_agent_rsp_fifo:in_endofpacket
	wire          msgdma_0_csr_agent_rsp_fifo_out_valid;                         // msgdma_0_csr_agent_rsp_fifo:out_valid -> msgdma_0_csr_agent:rf_sink_valid
	wire  [126:0] msgdma_0_csr_agent_rsp_fifo_out_data;                          // msgdma_0_csr_agent_rsp_fifo:out_data -> msgdma_0_csr_agent:rf_sink_data
	wire          msgdma_0_csr_agent_rsp_fifo_out_ready;                         // msgdma_0_csr_agent:rf_sink_ready -> msgdma_0_csr_agent_rsp_fifo:out_ready
	wire          msgdma_0_csr_agent_rsp_fifo_out_startofpacket;                 // msgdma_0_csr_agent_rsp_fifo:out_startofpacket -> msgdma_0_csr_agent:rf_sink_startofpacket
	wire          msgdma_0_csr_agent_rsp_fifo_out_endofpacket;                   // msgdma_0_csr_agent_rsp_fifo:out_endofpacket -> msgdma_0_csr_agent:rf_sink_endofpacket
	wire          msgdma_0_csr_agent_rdata_fifo_src_valid;                       // msgdma_0_csr_agent:rdata_fifo_src_valid -> msgdma_0_csr_agent_rdata_fifo:in_valid
	wire   [33:0] msgdma_0_csr_agent_rdata_fifo_src_data;                        // msgdma_0_csr_agent:rdata_fifo_src_data -> msgdma_0_csr_agent_rdata_fifo:in_data
	wire          msgdma_0_csr_agent_rdata_fifo_src_ready;                       // msgdma_0_csr_agent_rdata_fifo:in_ready -> msgdma_0_csr_agent:rdata_fifo_src_ready
	wire   [31:0] msgdma_1_csr_agent_m0_readdata;                                // msgdma_1_csr_translator:uav_readdata -> msgdma_1_csr_agent:m0_readdata
	wire          msgdma_1_csr_agent_m0_waitrequest;                             // msgdma_1_csr_translator:uav_waitrequest -> msgdma_1_csr_agent:m0_waitrequest
	wire          msgdma_1_csr_agent_m0_debugaccess;                             // msgdma_1_csr_agent:m0_debugaccess -> msgdma_1_csr_translator:uav_debugaccess
	wire   [31:0] msgdma_1_csr_agent_m0_address;                                 // msgdma_1_csr_agent:m0_address -> msgdma_1_csr_translator:uav_address
	wire    [3:0] msgdma_1_csr_agent_m0_byteenable;                              // msgdma_1_csr_agent:m0_byteenable -> msgdma_1_csr_translator:uav_byteenable
	wire          msgdma_1_csr_agent_m0_read;                                    // msgdma_1_csr_agent:m0_read -> msgdma_1_csr_translator:uav_read
	wire          msgdma_1_csr_agent_m0_readdatavalid;                           // msgdma_1_csr_translator:uav_readdatavalid -> msgdma_1_csr_agent:m0_readdatavalid
	wire          msgdma_1_csr_agent_m0_lock;                                    // msgdma_1_csr_agent:m0_lock -> msgdma_1_csr_translator:uav_lock
	wire   [31:0] msgdma_1_csr_agent_m0_writedata;                               // msgdma_1_csr_agent:m0_writedata -> msgdma_1_csr_translator:uav_writedata
	wire          msgdma_1_csr_agent_m0_write;                                   // msgdma_1_csr_agent:m0_write -> msgdma_1_csr_translator:uav_write
	wire    [2:0] msgdma_1_csr_agent_m0_burstcount;                              // msgdma_1_csr_agent:m0_burstcount -> msgdma_1_csr_translator:uav_burstcount
	wire          msgdma_1_csr_agent_rf_source_valid;                            // msgdma_1_csr_agent:rf_source_valid -> msgdma_1_csr_agent_rsp_fifo:in_valid
	wire  [126:0] msgdma_1_csr_agent_rf_source_data;                             // msgdma_1_csr_agent:rf_source_data -> msgdma_1_csr_agent_rsp_fifo:in_data
	wire          msgdma_1_csr_agent_rf_source_ready;                            // msgdma_1_csr_agent_rsp_fifo:in_ready -> msgdma_1_csr_agent:rf_source_ready
	wire          msgdma_1_csr_agent_rf_source_startofpacket;                    // msgdma_1_csr_agent:rf_source_startofpacket -> msgdma_1_csr_agent_rsp_fifo:in_startofpacket
	wire          msgdma_1_csr_agent_rf_source_endofpacket;                      // msgdma_1_csr_agent:rf_source_endofpacket -> msgdma_1_csr_agent_rsp_fifo:in_endofpacket
	wire          msgdma_1_csr_agent_rsp_fifo_out_valid;                         // msgdma_1_csr_agent_rsp_fifo:out_valid -> msgdma_1_csr_agent:rf_sink_valid
	wire  [126:0] msgdma_1_csr_agent_rsp_fifo_out_data;                          // msgdma_1_csr_agent_rsp_fifo:out_data -> msgdma_1_csr_agent:rf_sink_data
	wire          msgdma_1_csr_agent_rsp_fifo_out_ready;                         // msgdma_1_csr_agent:rf_sink_ready -> msgdma_1_csr_agent_rsp_fifo:out_ready
	wire          msgdma_1_csr_agent_rsp_fifo_out_startofpacket;                 // msgdma_1_csr_agent_rsp_fifo:out_startofpacket -> msgdma_1_csr_agent:rf_sink_startofpacket
	wire          msgdma_1_csr_agent_rsp_fifo_out_endofpacket;                   // msgdma_1_csr_agent_rsp_fifo:out_endofpacket -> msgdma_1_csr_agent:rf_sink_endofpacket
	wire          msgdma_1_csr_agent_rdata_fifo_src_valid;                       // msgdma_1_csr_agent:rdata_fifo_src_valid -> msgdma_1_csr_agent_rdata_fifo:in_valid
	wire   [33:0] msgdma_1_csr_agent_rdata_fifo_src_data;                        // msgdma_1_csr_agent:rdata_fifo_src_data -> msgdma_1_csr_agent_rdata_fifo:in_data
	wire          msgdma_1_csr_agent_rdata_fifo_src_ready;                       // msgdma_1_csr_agent_rdata_fifo:in_ready -> msgdma_1_csr_agent:rdata_fifo_src_ready
	wire  [127:0] msgdma_0_descriptor_slave_agent_m0_readdata;                   // msgdma_0_descriptor_slave_translator:uav_readdata -> msgdma_0_descriptor_slave_agent:m0_readdata
	wire          msgdma_0_descriptor_slave_agent_m0_waitrequest;                // msgdma_0_descriptor_slave_translator:uav_waitrequest -> msgdma_0_descriptor_slave_agent:m0_waitrequest
	wire          msgdma_0_descriptor_slave_agent_m0_debugaccess;                // msgdma_0_descriptor_slave_agent:m0_debugaccess -> msgdma_0_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] msgdma_0_descriptor_slave_agent_m0_address;                    // msgdma_0_descriptor_slave_agent:m0_address -> msgdma_0_descriptor_slave_translator:uav_address
	wire   [15:0] msgdma_0_descriptor_slave_agent_m0_byteenable;                 // msgdma_0_descriptor_slave_agent:m0_byteenable -> msgdma_0_descriptor_slave_translator:uav_byteenable
	wire          msgdma_0_descriptor_slave_agent_m0_read;                       // msgdma_0_descriptor_slave_agent:m0_read -> msgdma_0_descriptor_slave_translator:uav_read
	wire          msgdma_0_descriptor_slave_agent_m0_readdatavalid;              // msgdma_0_descriptor_slave_translator:uav_readdatavalid -> msgdma_0_descriptor_slave_agent:m0_readdatavalid
	wire          msgdma_0_descriptor_slave_agent_m0_lock;                       // msgdma_0_descriptor_slave_agent:m0_lock -> msgdma_0_descriptor_slave_translator:uav_lock
	wire  [127:0] msgdma_0_descriptor_slave_agent_m0_writedata;                  // msgdma_0_descriptor_slave_agent:m0_writedata -> msgdma_0_descriptor_slave_translator:uav_writedata
	wire          msgdma_0_descriptor_slave_agent_m0_write;                      // msgdma_0_descriptor_slave_agent:m0_write -> msgdma_0_descriptor_slave_translator:uav_write
	wire    [4:0] msgdma_0_descriptor_slave_agent_m0_burstcount;                 // msgdma_0_descriptor_slave_agent:m0_burstcount -> msgdma_0_descriptor_slave_translator:uav_burstcount
	wire          msgdma_0_descriptor_slave_agent_rf_source_valid;               // msgdma_0_descriptor_slave_agent:rf_source_valid -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [234:0] msgdma_0_descriptor_slave_agent_rf_source_data;                // msgdma_0_descriptor_slave_agent:rf_source_data -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_data
	wire          msgdma_0_descriptor_slave_agent_rf_source_ready;               // msgdma_0_descriptor_slave_agent_rsp_fifo:in_ready -> msgdma_0_descriptor_slave_agent:rf_source_ready
	wire          msgdma_0_descriptor_slave_agent_rf_source_startofpacket;       // msgdma_0_descriptor_slave_agent:rf_source_startofpacket -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rf_source_endofpacket;         // msgdma_0_descriptor_slave_agent:rf_source_endofpacket -> msgdma_0_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid;            // msgdma_0_descriptor_slave_agent_rsp_fifo:out_valid -> msgdma_0_descriptor_slave_agent:rf_sink_valid
	wire  [234:0] msgdma_0_descriptor_slave_agent_rsp_fifo_out_data;             // msgdma_0_descriptor_slave_agent_rsp_fifo:out_data -> msgdma_0_descriptor_slave_agent:rf_sink_data
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready;            // msgdma_0_descriptor_slave_agent:rf_sink_ready -> msgdma_0_descriptor_slave_agent_rsp_fifo:out_ready
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket;    // msgdma_0_descriptor_slave_agent_rsp_fifo:out_startofpacket -> msgdma_0_descriptor_slave_agent:rf_sink_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket;      // msgdma_0_descriptor_slave_agent_rsp_fifo:out_endofpacket -> msgdma_0_descriptor_slave_agent:rf_sink_endofpacket
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid;          // msgdma_0_descriptor_slave_agent:rdata_fifo_src_valid -> msgdma_0_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] msgdma_0_descriptor_slave_agent_rdata_fifo_src_data;           // msgdma_0_descriptor_slave_agent:rdata_fifo_src_data -> msgdma_0_descriptor_slave_agent_rdata_fifo:in_data
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready;          // msgdma_0_descriptor_slave_agent_rdata_fifo:in_ready -> msgdma_0_descriptor_slave_agent:rdata_fifo_src_ready
	wire  [127:0] msgdma_1_descriptor_slave_agent_m0_readdata;                   // msgdma_1_descriptor_slave_translator:uav_readdata -> msgdma_1_descriptor_slave_agent:m0_readdata
	wire          msgdma_1_descriptor_slave_agent_m0_waitrequest;                // msgdma_1_descriptor_slave_translator:uav_waitrequest -> msgdma_1_descriptor_slave_agent:m0_waitrequest
	wire          msgdma_1_descriptor_slave_agent_m0_debugaccess;                // msgdma_1_descriptor_slave_agent:m0_debugaccess -> msgdma_1_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] msgdma_1_descriptor_slave_agent_m0_address;                    // msgdma_1_descriptor_slave_agent:m0_address -> msgdma_1_descriptor_slave_translator:uav_address
	wire   [15:0] msgdma_1_descriptor_slave_agent_m0_byteenable;                 // msgdma_1_descriptor_slave_agent:m0_byteenable -> msgdma_1_descriptor_slave_translator:uav_byteenable
	wire          msgdma_1_descriptor_slave_agent_m0_read;                       // msgdma_1_descriptor_slave_agent:m0_read -> msgdma_1_descriptor_slave_translator:uav_read
	wire          msgdma_1_descriptor_slave_agent_m0_readdatavalid;              // msgdma_1_descriptor_slave_translator:uav_readdatavalid -> msgdma_1_descriptor_slave_agent:m0_readdatavalid
	wire          msgdma_1_descriptor_slave_agent_m0_lock;                       // msgdma_1_descriptor_slave_agent:m0_lock -> msgdma_1_descriptor_slave_translator:uav_lock
	wire  [127:0] msgdma_1_descriptor_slave_agent_m0_writedata;                  // msgdma_1_descriptor_slave_agent:m0_writedata -> msgdma_1_descriptor_slave_translator:uav_writedata
	wire          msgdma_1_descriptor_slave_agent_m0_write;                      // msgdma_1_descriptor_slave_agent:m0_write -> msgdma_1_descriptor_slave_translator:uav_write
	wire    [4:0] msgdma_1_descriptor_slave_agent_m0_burstcount;                 // msgdma_1_descriptor_slave_agent:m0_burstcount -> msgdma_1_descriptor_slave_translator:uav_burstcount
	wire          msgdma_1_descriptor_slave_agent_rf_source_valid;               // msgdma_1_descriptor_slave_agent:rf_source_valid -> msgdma_1_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [234:0] msgdma_1_descriptor_slave_agent_rf_source_data;                // msgdma_1_descriptor_slave_agent:rf_source_data -> msgdma_1_descriptor_slave_agent_rsp_fifo:in_data
	wire          msgdma_1_descriptor_slave_agent_rf_source_ready;               // msgdma_1_descriptor_slave_agent_rsp_fifo:in_ready -> msgdma_1_descriptor_slave_agent:rf_source_ready
	wire          msgdma_1_descriptor_slave_agent_rf_source_startofpacket;       // msgdma_1_descriptor_slave_agent:rf_source_startofpacket -> msgdma_1_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          msgdma_1_descriptor_slave_agent_rf_source_endofpacket;         // msgdma_1_descriptor_slave_agent:rf_source_endofpacket -> msgdma_1_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          msgdma_1_descriptor_slave_agent_rsp_fifo_out_valid;            // msgdma_1_descriptor_slave_agent_rsp_fifo:out_valid -> msgdma_1_descriptor_slave_agent:rf_sink_valid
	wire  [234:0] msgdma_1_descriptor_slave_agent_rsp_fifo_out_data;             // msgdma_1_descriptor_slave_agent_rsp_fifo:out_data -> msgdma_1_descriptor_slave_agent:rf_sink_data
	wire          msgdma_1_descriptor_slave_agent_rsp_fifo_out_ready;            // msgdma_1_descriptor_slave_agent:rf_sink_ready -> msgdma_1_descriptor_slave_agent_rsp_fifo:out_ready
	wire          msgdma_1_descriptor_slave_agent_rsp_fifo_out_startofpacket;    // msgdma_1_descriptor_slave_agent_rsp_fifo:out_startofpacket -> msgdma_1_descriptor_slave_agent:rf_sink_startofpacket
	wire          msgdma_1_descriptor_slave_agent_rsp_fifo_out_endofpacket;      // msgdma_1_descriptor_slave_agent_rsp_fifo:out_endofpacket -> msgdma_1_descriptor_slave_agent:rf_sink_endofpacket
	wire          msgdma_1_descriptor_slave_agent_rdata_fifo_src_valid;          // msgdma_1_descriptor_slave_agent:rdata_fifo_src_valid -> msgdma_1_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] msgdma_1_descriptor_slave_agent_rdata_fifo_src_data;           // msgdma_1_descriptor_slave_agent:rdata_fifo_src_data -> msgdma_1_descriptor_slave_agent_rdata_fifo:in_data
	wire          msgdma_1_descriptor_slave_agent_rdata_fifo_src_ready;          // msgdma_1_descriptor_slave_agent_rdata_fifo:in_ready -> msgdma_1_descriptor_slave_agent:rdata_fifo_src_ready
	wire    [7:0] onchip_memory2_s1_agent_m0_readdata;                           // onchip_memory2_s1_translator:uav_readdata -> onchip_memory2_s1_agent:m0_readdata
	wire          onchip_memory2_s1_agent_m0_waitrequest;                        // onchip_memory2_s1_translator:uav_waitrequest -> onchip_memory2_s1_agent:m0_waitrequest
	wire          onchip_memory2_s1_agent_m0_debugaccess;                        // onchip_memory2_s1_agent:m0_debugaccess -> onchip_memory2_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_s1_agent_m0_address;                            // onchip_memory2_s1_agent:m0_address -> onchip_memory2_s1_translator:uav_address
	wire    [0:0] onchip_memory2_s1_agent_m0_byteenable;                         // onchip_memory2_s1_agent:m0_byteenable -> onchip_memory2_s1_translator:uav_byteenable
	wire          onchip_memory2_s1_agent_m0_read;                               // onchip_memory2_s1_agent:m0_read -> onchip_memory2_s1_translator:uav_read
	wire          onchip_memory2_s1_agent_m0_readdatavalid;                      // onchip_memory2_s1_translator:uav_readdatavalid -> onchip_memory2_s1_agent:m0_readdatavalid
	wire          onchip_memory2_s1_agent_m0_lock;                               // onchip_memory2_s1_agent:m0_lock -> onchip_memory2_s1_translator:uav_lock
	wire    [7:0] onchip_memory2_s1_agent_m0_writedata;                          // onchip_memory2_s1_agent:m0_writedata -> onchip_memory2_s1_translator:uav_writedata
	wire          onchip_memory2_s1_agent_m0_write;                              // onchip_memory2_s1_agent:m0_write -> onchip_memory2_s1_translator:uav_write
	wire    [0:0] onchip_memory2_s1_agent_m0_burstcount;                         // onchip_memory2_s1_agent:m0_burstcount -> onchip_memory2_s1_translator:uav_burstcount
	wire          onchip_memory2_s1_agent_rf_source_valid;                       // onchip_memory2_s1_agent:rf_source_valid -> onchip_memory2_s1_agent_rsp_fifo:in_valid
	wire   [99:0] onchip_memory2_s1_agent_rf_source_data;                        // onchip_memory2_s1_agent:rf_source_data -> onchip_memory2_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_s1_agent_rf_source_ready;                       // onchip_memory2_s1_agent_rsp_fifo:in_ready -> onchip_memory2_s1_agent:rf_source_ready
	wire          onchip_memory2_s1_agent_rf_source_startofpacket;               // onchip_memory2_s1_agent:rf_source_startofpacket -> onchip_memory2_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_s1_agent_rf_source_endofpacket;                 // onchip_memory2_s1_agent:rf_source_endofpacket -> onchip_memory2_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_s1_agent_rsp_fifo_out_valid;                    // onchip_memory2_s1_agent_rsp_fifo:out_valid -> onchip_memory2_s1_agent:rf_sink_valid
	wire   [99:0] onchip_memory2_s1_agent_rsp_fifo_out_data;                     // onchip_memory2_s1_agent_rsp_fifo:out_data -> onchip_memory2_s1_agent:rf_sink_data
	wire          onchip_memory2_s1_agent_rsp_fifo_out_ready;                    // onchip_memory2_s1_agent:rf_sink_ready -> onchip_memory2_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_s1_agent_rsp_fifo_out_startofpacket;            // onchip_memory2_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_s1_agent_rsp_fifo_out_endofpacket;              // onchip_memory2_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_s1_agent_rdata_fifo_src_valid;                  // onchip_memory2_s1_agent:rdata_fifo_src_valid -> onchip_memory2_s1_agent_rdata_fifo:in_valid
	wire    [9:0] onchip_memory2_s1_agent_rdata_fifo_src_data;                   // onchip_memory2_s1_agent:rdata_fifo_src_data -> onchip_memory2_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_s1_agent_rdata_fifo_src_ready;                  // onchip_memory2_s1_agent_rdata_fifo:in_ready -> onchip_memory2_s1_agent:rdata_fifo_src_ready
	wire          arria10_hps_h2f_axi_master_agent_write_cp_valid;               // arria10_hps_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [161:0] arria10_hps_h2f_axi_master_agent_write_cp_data;                // arria10_hps_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          arria10_hps_h2f_axi_master_agent_write_cp_ready;               // router:sink_ready -> arria10_hps_h2f_axi_master_agent:write_cp_ready
	wire          arria10_hps_h2f_axi_master_agent_write_cp_startofpacket;       // arria10_hps_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arria10_hps_h2f_axi_master_agent_write_cp_endofpacket;         // arria10_hps_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arria10_hps_h2f_axi_master_agent_read_cp_valid;                // arria10_hps_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [161:0] arria10_hps_h2f_axi_master_agent_read_cp_data;                 // arria10_hps_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arria10_hps_h2f_axi_master_agent_read_cp_ready;                // router_001:sink_ready -> arria10_hps_h2f_axi_master_agent:read_cp_ready
	wire          arria10_hps_h2f_axi_master_agent_read_cp_startofpacket;        // arria10_hps_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arria10_hps_h2f_axi_master_agent_read_cp_endofpacket;          // arria10_hps_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          msgdma_0_csr_agent_rp_valid;                                   // msgdma_0_csr_agent:rp_valid -> router_002:sink_valid
	wire  [125:0] msgdma_0_csr_agent_rp_data;                                    // msgdma_0_csr_agent:rp_data -> router_002:sink_data
	wire          msgdma_0_csr_agent_rp_ready;                                   // router_002:sink_ready -> msgdma_0_csr_agent:rp_ready
	wire          msgdma_0_csr_agent_rp_startofpacket;                           // msgdma_0_csr_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          msgdma_0_csr_agent_rp_endofpacket;                             // msgdma_0_csr_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          msgdma_1_csr_agent_rp_valid;                                   // msgdma_1_csr_agent:rp_valid -> router_003:sink_valid
	wire  [125:0] msgdma_1_csr_agent_rp_data;                                    // msgdma_1_csr_agent:rp_data -> router_003:sink_data
	wire          msgdma_1_csr_agent_rp_ready;                                   // router_003:sink_ready -> msgdma_1_csr_agent:rp_ready
	wire          msgdma_1_csr_agent_rp_startofpacket;                           // msgdma_1_csr_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          msgdma_1_csr_agent_rp_endofpacket;                             // msgdma_1_csr_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          msgdma_0_descriptor_slave_agent_rp_valid;                      // msgdma_0_descriptor_slave_agent:rp_valid -> router_004:sink_valid
	wire  [233:0] msgdma_0_descriptor_slave_agent_rp_data;                       // msgdma_0_descriptor_slave_agent:rp_data -> router_004:sink_data
	wire          msgdma_0_descriptor_slave_agent_rp_ready;                      // router_004:sink_ready -> msgdma_0_descriptor_slave_agent:rp_ready
	wire          msgdma_0_descriptor_slave_agent_rp_startofpacket;              // msgdma_0_descriptor_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          msgdma_0_descriptor_slave_agent_rp_endofpacket;                // msgdma_0_descriptor_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          msgdma_1_descriptor_slave_agent_rp_valid;                      // msgdma_1_descriptor_slave_agent:rp_valid -> router_005:sink_valid
	wire  [233:0] msgdma_1_descriptor_slave_agent_rp_data;                       // msgdma_1_descriptor_slave_agent:rp_data -> router_005:sink_data
	wire          msgdma_1_descriptor_slave_agent_rp_ready;                      // router_005:sink_ready -> msgdma_1_descriptor_slave_agent:rp_ready
	wire          msgdma_1_descriptor_slave_agent_rp_startofpacket;              // msgdma_1_descriptor_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          msgdma_1_descriptor_slave_agent_rp_endofpacket;                // msgdma_1_descriptor_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          onchip_memory2_s1_agent_rp_valid;                              // onchip_memory2_s1_agent:rp_valid -> router_006:sink_valid
	wire   [98:0] onchip_memory2_s1_agent_rp_data;                               // onchip_memory2_s1_agent:rp_data -> router_006:sink_data
	wire          onchip_memory2_s1_agent_rp_ready;                              // router_006:sink_ready -> onchip_memory2_s1_agent:rp_ready
	wire          onchip_memory2_s1_agent_rp_startofpacket;                      // onchip_memory2_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          onchip_memory2_s1_agent_rp_endofpacket;                        // onchip_memory2_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_src_valid;                                              // router:src_valid -> arria10_hps_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [161:0] router_src_data;                                               // router:src_data -> arria10_hps_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                              // arria10_hps_h2f_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                            // router:src_channel -> arria10_hps_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                      // router:src_startofpacket -> arria10_hps_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                        // router:src_endofpacket -> arria10_hps_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [161:0] arria10_hps_h2f_axi_master_wr_limiter_cmd_src_data;            // arria10_hps_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          arria10_hps_h2f_axi_master_wr_limiter_cmd_src_ready;           // cmd_demux:sink_ready -> arria10_hps_h2f_axi_master_wr_limiter:cmd_src_ready
	wire    [4:0] arria10_hps_h2f_axi_master_wr_limiter_cmd_src_channel;         // arria10_hps_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          arria10_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket;   // arria10_hps_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          arria10_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket;     // arria10_hps_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                             // rsp_mux:src_valid -> arria10_hps_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [161:0] rsp_mux_src_data;                                              // rsp_mux:src_data -> arria10_hps_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                             // arria10_hps_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                           // rsp_mux:src_channel -> arria10_hps_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                     // rsp_mux:src_startofpacket -> arria10_hps_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                       // rsp_mux:src_endofpacket -> arria10_hps_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          arria10_hps_h2f_axi_master_wr_limiter_rsp_src_valid;           // arria10_hps_h2f_axi_master_wr_limiter:rsp_src_valid -> arria10_hps_h2f_axi_master_agent:write_rp_valid
	wire  [161:0] arria10_hps_h2f_axi_master_wr_limiter_rsp_src_data;            // arria10_hps_h2f_axi_master_wr_limiter:rsp_src_data -> arria10_hps_h2f_axi_master_agent:write_rp_data
	wire          arria10_hps_h2f_axi_master_wr_limiter_rsp_src_ready;           // arria10_hps_h2f_axi_master_agent:write_rp_ready -> arria10_hps_h2f_axi_master_wr_limiter:rsp_src_ready
	wire    [4:0] arria10_hps_h2f_axi_master_wr_limiter_rsp_src_channel;         // arria10_hps_h2f_axi_master_wr_limiter:rsp_src_channel -> arria10_hps_h2f_axi_master_agent:write_rp_channel
	wire          arria10_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket;   // arria10_hps_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> arria10_hps_h2f_axi_master_agent:write_rp_startofpacket
	wire          arria10_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket;     // arria10_hps_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> arria10_hps_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                          // router_001:src_valid -> arria10_hps_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [161:0] router_001_src_data;                                           // router_001:src_data -> arria10_hps_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                          // arria10_hps_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                        // router_001:src_channel -> arria10_hps_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                  // router_001:src_startofpacket -> arria10_hps_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                    // router_001:src_endofpacket -> arria10_hps_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [161:0] arria10_hps_h2f_axi_master_rd_limiter_cmd_src_data;            // arria10_hps_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          arria10_hps_h2f_axi_master_rd_limiter_cmd_src_ready;           // cmd_demux_001:sink_ready -> arria10_hps_h2f_axi_master_rd_limiter:cmd_src_ready
	wire    [4:0] arria10_hps_h2f_axi_master_rd_limiter_cmd_src_channel;         // arria10_hps_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          arria10_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket;   // arria10_hps_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          arria10_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket;     // arria10_hps_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                         // rsp_mux_001:src_valid -> arria10_hps_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [161:0] rsp_mux_001_src_data;                                          // rsp_mux_001:src_data -> arria10_hps_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                         // arria10_hps_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [4:0] rsp_mux_001_src_channel;                                       // rsp_mux_001:src_channel -> arria10_hps_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                 // rsp_mux_001:src_startofpacket -> arria10_hps_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                   // rsp_mux_001:src_endofpacket -> arria10_hps_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          arria10_hps_h2f_axi_master_rd_limiter_rsp_src_valid;           // arria10_hps_h2f_axi_master_rd_limiter:rsp_src_valid -> arria10_hps_h2f_axi_master_agent:read_rp_valid
	wire  [161:0] arria10_hps_h2f_axi_master_rd_limiter_rsp_src_data;            // arria10_hps_h2f_axi_master_rd_limiter:rsp_src_data -> arria10_hps_h2f_axi_master_agent:read_rp_data
	wire          arria10_hps_h2f_axi_master_rd_limiter_rsp_src_ready;           // arria10_hps_h2f_axi_master_agent:read_rp_ready -> arria10_hps_h2f_axi_master_rd_limiter:rsp_src_ready
	wire    [4:0] arria10_hps_h2f_axi_master_rd_limiter_rsp_src_channel;         // arria10_hps_h2f_axi_master_rd_limiter:rsp_src_channel -> arria10_hps_h2f_axi_master_agent:read_rp_channel
	wire          arria10_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket;   // arria10_hps_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> arria10_hps_h2f_axi_master_agent:read_rp_startofpacket
	wire          arria10_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket;     // arria10_hps_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> arria10_hps_h2f_axi_master_agent:read_rp_endofpacket
	wire          msgdma_0_csr_burst_adapter_source0_valid;                      // msgdma_0_csr_burst_adapter:source0_valid -> msgdma_0_csr_agent:cp_valid
	wire  [125:0] msgdma_0_csr_burst_adapter_source0_data;                       // msgdma_0_csr_burst_adapter:source0_data -> msgdma_0_csr_agent:cp_data
	wire          msgdma_0_csr_burst_adapter_source0_ready;                      // msgdma_0_csr_agent:cp_ready -> msgdma_0_csr_burst_adapter:source0_ready
	wire    [4:0] msgdma_0_csr_burst_adapter_source0_channel;                    // msgdma_0_csr_burst_adapter:source0_channel -> msgdma_0_csr_agent:cp_channel
	wire          msgdma_0_csr_burst_adapter_source0_startofpacket;              // msgdma_0_csr_burst_adapter:source0_startofpacket -> msgdma_0_csr_agent:cp_startofpacket
	wire          msgdma_0_csr_burst_adapter_source0_endofpacket;                // msgdma_0_csr_burst_adapter:source0_endofpacket -> msgdma_0_csr_agent:cp_endofpacket
	wire          msgdma_1_csr_burst_adapter_source0_valid;                      // msgdma_1_csr_burst_adapter:source0_valid -> msgdma_1_csr_agent:cp_valid
	wire  [125:0] msgdma_1_csr_burst_adapter_source0_data;                       // msgdma_1_csr_burst_adapter:source0_data -> msgdma_1_csr_agent:cp_data
	wire          msgdma_1_csr_burst_adapter_source0_ready;                      // msgdma_1_csr_agent:cp_ready -> msgdma_1_csr_burst_adapter:source0_ready
	wire    [4:0] msgdma_1_csr_burst_adapter_source0_channel;                    // msgdma_1_csr_burst_adapter:source0_channel -> msgdma_1_csr_agent:cp_channel
	wire          msgdma_1_csr_burst_adapter_source0_startofpacket;              // msgdma_1_csr_burst_adapter:source0_startofpacket -> msgdma_1_csr_agent:cp_startofpacket
	wire          msgdma_1_csr_burst_adapter_source0_endofpacket;                // msgdma_1_csr_burst_adapter:source0_endofpacket -> msgdma_1_csr_agent:cp_endofpacket
	wire          msgdma_0_descriptor_slave_burst_adapter_source0_valid;         // msgdma_0_descriptor_slave_burst_adapter:source0_valid -> msgdma_0_descriptor_slave_agent:cp_valid
	wire  [233:0] msgdma_0_descriptor_slave_burst_adapter_source0_data;          // msgdma_0_descriptor_slave_burst_adapter:source0_data -> msgdma_0_descriptor_slave_agent:cp_data
	wire          msgdma_0_descriptor_slave_burst_adapter_source0_ready;         // msgdma_0_descriptor_slave_agent:cp_ready -> msgdma_0_descriptor_slave_burst_adapter:source0_ready
	wire    [4:0] msgdma_0_descriptor_slave_burst_adapter_source0_channel;       // msgdma_0_descriptor_slave_burst_adapter:source0_channel -> msgdma_0_descriptor_slave_agent:cp_channel
	wire          msgdma_0_descriptor_slave_burst_adapter_source0_startofpacket; // msgdma_0_descriptor_slave_burst_adapter:source0_startofpacket -> msgdma_0_descriptor_slave_agent:cp_startofpacket
	wire          msgdma_0_descriptor_slave_burst_adapter_source0_endofpacket;   // msgdma_0_descriptor_slave_burst_adapter:source0_endofpacket -> msgdma_0_descriptor_slave_agent:cp_endofpacket
	wire          msgdma_1_descriptor_slave_burst_adapter_source0_valid;         // msgdma_1_descriptor_slave_burst_adapter:source0_valid -> msgdma_1_descriptor_slave_agent:cp_valid
	wire  [233:0] msgdma_1_descriptor_slave_burst_adapter_source0_data;          // msgdma_1_descriptor_slave_burst_adapter:source0_data -> msgdma_1_descriptor_slave_agent:cp_data
	wire          msgdma_1_descriptor_slave_burst_adapter_source0_ready;         // msgdma_1_descriptor_slave_agent:cp_ready -> msgdma_1_descriptor_slave_burst_adapter:source0_ready
	wire    [4:0] msgdma_1_descriptor_slave_burst_adapter_source0_channel;       // msgdma_1_descriptor_slave_burst_adapter:source0_channel -> msgdma_1_descriptor_slave_agent:cp_channel
	wire          msgdma_1_descriptor_slave_burst_adapter_source0_startofpacket; // msgdma_1_descriptor_slave_burst_adapter:source0_startofpacket -> msgdma_1_descriptor_slave_agent:cp_startofpacket
	wire          msgdma_1_descriptor_slave_burst_adapter_source0_endofpacket;   // msgdma_1_descriptor_slave_burst_adapter:source0_endofpacket -> msgdma_1_descriptor_slave_agent:cp_endofpacket
	wire          onchip_memory2_s1_burst_adapter_source0_valid;                 // onchip_memory2_s1_burst_adapter:source0_valid -> onchip_memory2_s1_agent:cp_valid
	wire   [98:0] onchip_memory2_s1_burst_adapter_source0_data;                  // onchip_memory2_s1_burst_adapter:source0_data -> onchip_memory2_s1_agent:cp_data
	wire          onchip_memory2_s1_burst_adapter_source0_ready;                 // onchip_memory2_s1_agent:cp_ready -> onchip_memory2_s1_burst_adapter:source0_ready
	wire    [4:0] onchip_memory2_s1_burst_adapter_source0_channel;               // onchip_memory2_s1_burst_adapter:source0_channel -> onchip_memory2_s1_agent:cp_channel
	wire          onchip_memory2_s1_burst_adapter_source0_startofpacket;         // onchip_memory2_s1_burst_adapter:source0_startofpacket -> onchip_memory2_s1_agent:cp_startofpacket
	wire          onchip_memory2_s1_burst_adapter_source0_endofpacket;           // onchip_memory2_s1_burst_adapter:source0_endofpacket -> onchip_memory2_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                          // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [161:0] cmd_demux_src0_data;                                           // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                          // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                        // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                  // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                    // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                          // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [161:0] cmd_demux_src1_data;                                           // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                          // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [4:0] cmd_demux_src1_channel;                                        // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                  // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                    // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                          // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [161:0] cmd_demux_src2_data;                                           // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                          // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [4:0] cmd_demux_src2_channel;                                        // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                  // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                    // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                          // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [161:0] cmd_demux_src3_data;                                           // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                          // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [4:0] cmd_demux_src3_channel;                                        // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                  // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                    // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                          // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [161:0] cmd_demux_src4_data;                                           // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                          // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [4:0] cmd_demux_src4_channel;                                        // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                  // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                    // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                      // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [161:0] cmd_demux_001_src0_data;                                       // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                      // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [4:0] cmd_demux_001_src0_channel;                                    // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                              // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                      // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [161:0] cmd_demux_001_src1_data;                                       // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                      // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [4:0] cmd_demux_001_src1_channel;                                    // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                              // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                      // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [161:0] cmd_demux_001_src2_data;                                       // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                      // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [4:0] cmd_demux_001_src2_channel;                                    // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                              // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                      // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [161:0] cmd_demux_001_src3_data;                                       // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                      // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [4:0] cmd_demux_001_src3_channel;                                    // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                              // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                      // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [161:0] cmd_demux_001_src4_data;                                       // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                      // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire    [4:0] cmd_demux_001_src4_channel;                                    // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                              // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                          // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [161:0] rsp_demux_src0_data;                                           // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                          // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                        // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                  // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                    // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                          // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [161:0] rsp_demux_src1_data;                                           // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                          // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [4:0] rsp_demux_src1_channel;                                        // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                  // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                    // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                      // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [161:0] rsp_demux_001_src0_data;                                       // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                      // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                    // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                              // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                      // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [161:0] rsp_demux_001_src1_data;                                       // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                      // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [4:0] rsp_demux_001_src1_channel;                                    // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                              // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                      // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [161:0] rsp_demux_002_src0_data;                                       // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                      // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                    // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                              // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                      // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [161:0] rsp_demux_002_src1_data;                                       // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                      // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [4:0] rsp_demux_002_src1_channel;                                    // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                              // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                      // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [161:0] rsp_demux_003_src0_data;                                       // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                      // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                    // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                              // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                      // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [161:0] rsp_demux_003_src1_data;                                       // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                      // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [4:0] rsp_demux_003_src1_channel;                                    // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                              // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                      // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [161:0] rsp_demux_004_src0_data;                                       // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                      // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                    // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                              // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                      // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [161:0] rsp_demux_004_src1_data;                                       // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                      // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [4:0] rsp_demux_004_src1_channel;                                    // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                              // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          router_002_src_valid;                                          // router_002:src_valid -> msgdma_0_csr_rsp_width_adapter:in_valid
	wire  [125:0] router_002_src_data;                                           // router_002:src_data -> msgdma_0_csr_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                          // msgdma_0_csr_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                        // router_002:src_channel -> msgdma_0_csr_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                  // router_002:src_startofpacket -> msgdma_0_csr_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                    // router_002:src_endofpacket -> msgdma_0_csr_rsp_width_adapter:in_endofpacket
	wire          msgdma_0_csr_rsp_width_adapter_src_valid;                      // msgdma_0_csr_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [161:0] msgdma_0_csr_rsp_width_adapter_src_data;                       // msgdma_0_csr_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          msgdma_0_csr_rsp_width_adapter_src_ready;                      // rsp_demux:sink_ready -> msgdma_0_csr_rsp_width_adapter:out_ready
	wire    [4:0] msgdma_0_csr_rsp_width_adapter_src_channel;                    // msgdma_0_csr_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          msgdma_0_csr_rsp_width_adapter_src_startofpacket;              // msgdma_0_csr_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          msgdma_0_csr_rsp_width_adapter_src_endofpacket;                // msgdma_0_csr_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                          // router_003:src_valid -> msgdma_1_csr_rsp_width_adapter:in_valid
	wire  [125:0] router_003_src_data;                                           // router_003:src_data -> msgdma_1_csr_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                          // msgdma_1_csr_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                        // router_003:src_channel -> msgdma_1_csr_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                  // router_003:src_startofpacket -> msgdma_1_csr_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                    // router_003:src_endofpacket -> msgdma_1_csr_rsp_width_adapter:in_endofpacket
	wire          msgdma_1_csr_rsp_width_adapter_src_valid;                      // msgdma_1_csr_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [161:0] msgdma_1_csr_rsp_width_adapter_src_data;                       // msgdma_1_csr_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          msgdma_1_csr_rsp_width_adapter_src_ready;                      // rsp_demux_001:sink_ready -> msgdma_1_csr_rsp_width_adapter:out_ready
	wire    [4:0] msgdma_1_csr_rsp_width_adapter_src_channel;                    // msgdma_1_csr_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          msgdma_1_csr_rsp_width_adapter_src_startofpacket;              // msgdma_1_csr_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          msgdma_1_csr_rsp_width_adapter_src_endofpacket;                // msgdma_1_csr_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                          // router_004:src_valid -> msgdma_0_descriptor_slave_rsp_width_adapter:in_valid
	wire  [233:0] router_004_src_data;                                           // router_004:src_data -> msgdma_0_descriptor_slave_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                          // msgdma_0_descriptor_slave_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                        // router_004:src_channel -> msgdma_0_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                  // router_004:src_startofpacket -> msgdma_0_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                    // router_004:src_endofpacket -> msgdma_0_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_valid;         // msgdma_0_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [161:0] msgdma_0_descriptor_slave_rsp_width_adapter_src_data;          // msgdma_0_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_ready;         // rsp_demux_002:sink_ready -> msgdma_0_descriptor_slave_rsp_width_adapter:out_ready
	wire    [4:0] msgdma_0_descriptor_slave_rsp_width_adapter_src_channel;       // msgdma_0_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_startofpacket; // msgdma_0_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          msgdma_0_descriptor_slave_rsp_width_adapter_src_endofpacket;   // msgdma_0_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                          // router_005:src_valid -> msgdma_1_descriptor_slave_rsp_width_adapter:in_valid
	wire  [233:0] router_005_src_data;                                           // router_005:src_data -> msgdma_1_descriptor_slave_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                          // msgdma_1_descriptor_slave_rsp_width_adapter:in_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                        // router_005:src_channel -> msgdma_1_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                  // router_005:src_startofpacket -> msgdma_1_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                    // router_005:src_endofpacket -> msgdma_1_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          msgdma_1_descriptor_slave_rsp_width_adapter_src_valid;         // msgdma_1_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [161:0] msgdma_1_descriptor_slave_rsp_width_adapter_src_data;          // msgdma_1_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          msgdma_1_descriptor_slave_rsp_width_adapter_src_ready;         // rsp_demux_003:sink_ready -> msgdma_1_descriptor_slave_rsp_width_adapter:out_ready
	wire    [4:0] msgdma_1_descriptor_slave_rsp_width_adapter_src_channel;       // msgdma_1_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          msgdma_1_descriptor_slave_rsp_width_adapter_src_startofpacket; // msgdma_1_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          msgdma_1_descriptor_slave_rsp_width_adapter_src_endofpacket;   // msgdma_1_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                          // router_006:src_valid -> onchip_memory2_s1_rsp_width_adapter:in_valid
	wire   [98:0] router_006_src_data;                                           // router_006:src_data -> onchip_memory2_s1_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                          // onchip_memory2_s1_rsp_width_adapter:in_ready -> router_006:src_ready
	wire    [4:0] router_006_src_channel;                                        // router_006:src_channel -> onchip_memory2_s1_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                  // router_006:src_startofpacket -> onchip_memory2_s1_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                    // router_006:src_endofpacket -> onchip_memory2_s1_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_s1_rsp_width_adapter_src_valid;                 // onchip_memory2_s1_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [161:0] onchip_memory2_s1_rsp_width_adapter_src_data;                  // onchip_memory2_s1_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          onchip_memory2_s1_rsp_width_adapter_src_ready;                 // rsp_demux_004:sink_ready -> onchip_memory2_s1_rsp_width_adapter:out_ready
	wire    [4:0] onchip_memory2_s1_rsp_width_adapter_src_channel;               // onchip_memory2_s1_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          onchip_memory2_s1_rsp_width_adapter_src_startofpacket;         // onchip_memory2_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          onchip_memory2_s1_rsp_width_adapter_src_endofpacket;           // onchip_memory2_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          cmd_mux_src_valid;                                             // cmd_mux:src_valid -> msgdma_0_csr_cmd_width_adapter:in_valid
	wire  [161:0] cmd_mux_src_data;                                              // cmd_mux:src_data -> msgdma_0_csr_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                             // msgdma_0_csr_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                           // cmd_mux:src_channel -> msgdma_0_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                     // cmd_mux:src_startofpacket -> msgdma_0_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                       // cmd_mux:src_endofpacket -> msgdma_0_csr_cmd_width_adapter:in_endofpacket
	wire          msgdma_0_csr_cmd_width_adapter_src_valid;                      // msgdma_0_csr_cmd_width_adapter:out_valid -> msgdma_0_csr_burst_adapter:sink0_valid
	wire  [125:0] msgdma_0_csr_cmd_width_adapter_src_data;                       // msgdma_0_csr_cmd_width_adapter:out_data -> msgdma_0_csr_burst_adapter:sink0_data
	wire          msgdma_0_csr_cmd_width_adapter_src_ready;                      // msgdma_0_csr_burst_adapter:sink0_ready -> msgdma_0_csr_cmd_width_adapter:out_ready
	wire    [4:0] msgdma_0_csr_cmd_width_adapter_src_channel;                    // msgdma_0_csr_cmd_width_adapter:out_channel -> msgdma_0_csr_burst_adapter:sink0_channel
	wire          msgdma_0_csr_cmd_width_adapter_src_startofpacket;              // msgdma_0_csr_cmd_width_adapter:out_startofpacket -> msgdma_0_csr_burst_adapter:sink0_startofpacket
	wire          msgdma_0_csr_cmd_width_adapter_src_endofpacket;                // msgdma_0_csr_cmd_width_adapter:out_endofpacket -> msgdma_0_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                         // cmd_mux_001:src_valid -> msgdma_1_csr_cmd_width_adapter:in_valid
	wire  [161:0] cmd_mux_001_src_data;                                          // cmd_mux_001:src_data -> msgdma_1_csr_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                         // msgdma_1_csr_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                       // cmd_mux_001:src_channel -> msgdma_1_csr_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                 // cmd_mux_001:src_startofpacket -> msgdma_1_csr_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                   // cmd_mux_001:src_endofpacket -> msgdma_1_csr_cmd_width_adapter:in_endofpacket
	wire          msgdma_1_csr_cmd_width_adapter_src_valid;                      // msgdma_1_csr_cmd_width_adapter:out_valid -> msgdma_1_csr_burst_adapter:sink0_valid
	wire  [125:0] msgdma_1_csr_cmd_width_adapter_src_data;                       // msgdma_1_csr_cmd_width_adapter:out_data -> msgdma_1_csr_burst_adapter:sink0_data
	wire          msgdma_1_csr_cmd_width_adapter_src_ready;                      // msgdma_1_csr_burst_adapter:sink0_ready -> msgdma_1_csr_cmd_width_adapter:out_ready
	wire    [4:0] msgdma_1_csr_cmd_width_adapter_src_channel;                    // msgdma_1_csr_cmd_width_adapter:out_channel -> msgdma_1_csr_burst_adapter:sink0_channel
	wire          msgdma_1_csr_cmd_width_adapter_src_startofpacket;              // msgdma_1_csr_cmd_width_adapter:out_startofpacket -> msgdma_1_csr_burst_adapter:sink0_startofpacket
	wire          msgdma_1_csr_cmd_width_adapter_src_endofpacket;                // msgdma_1_csr_cmd_width_adapter:out_endofpacket -> msgdma_1_csr_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                         // cmd_mux_002:src_valid -> msgdma_0_descriptor_slave_cmd_width_adapter:in_valid
	wire  [161:0] cmd_mux_002_src_data;                                          // cmd_mux_002:src_data -> msgdma_0_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                         // msgdma_0_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                       // cmd_mux_002:src_channel -> msgdma_0_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                 // cmd_mux_002:src_startofpacket -> msgdma_0_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                   // cmd_mux_002:src_endofpacket -> msgdma_0_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_valid;         // msgdma_0_descriptor_slave_cmd_width_adapter:out_valid -> msgdma_0_descriptor_slave_burst_adapter:sink0_valid
	wire  [233:0] msgdma_0_descriptor_slave_cmd_width_adapter_src_data;          // msgdma_0_descriptor_slave_cmd_width_adapter:out_data -> msgdma_0_descriptor_slave_burst_adapter:sink0_data
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_ready;         // msgdma_0_descriptor_slave_burst_adapter:sink0_ready -> msgdma_0_descriptor_slave_cmd_width_adapter:out_ready
	wire    [4:0] msgdma_0_descriptor_slave_cmd_width_adapter_src_channel;       // msgdma_0_descriptor_slave_cmd_width_adapter:out_channel -> msgdma_0_descriptor_slave_burst_adapter:sink0_channel
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket; // msgdma_0_descriptor_slave_cmd_width_adapter:out_startofpacket -> msgdma_0_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket;   // msgdma_0_descriptor_slave_cmd_width_adapter:out_endofpacket -> msgdma_0_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                         // cmd_mux_003:src_valid -> msgdma_1_descriptor_slave_cmd_width_adapter:in_valid
	wire  [161:0] cmd_mux_003_src_data;                                          // cmd_mux_003:src_data -> msgdma_1_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                         // msgdma_1_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                       // cmd_mux_003:src_channel -> msgdma_1_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                 // cmd_mux_003:src_startofpacket -> msgdma_1_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                   // cmd_mux_003:src_endofpacket -> msgdma_1_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          msgdma_1_descriptor_slave_cmd_width_adapter_src_valid;         // msgdma_1_descriptor_slave_cmd_width_adapter:out_valid -> msgdma_1_descriptor_slave_burst_adapter:sink0_valid
	wire  [233:0] msgdma_1_descriptor_slave_cmd_width_adapter_src_data;          // msgdma_1_descriptor_slave_cmd_width_adapter:out_data -> msgdma_1_descriptor_slave_burst_adapter:sink0_data
	wire          msgdma_1_descriptor_slave_cmd_width_adapter_src_ready;         // msgdma_1_descriptor_slave_burst_adapter:sink0_ready -> msgdma_1_descriptor_slave_cmd_width_adapter:out_ready
	wire    [4:0] msgdma_1_descriptor_slave_cmd_width_adapter_src_channel;       // msgdma_1_descriptor_slave_cmd_width_adapter:out_channel -> msgdma_1_descriptor_slave_burst_adapter:sink0_channel
	wire          msgdma_1_descriptor_slave_cmd_width_adapter_src_startofpacket; // msgdma_1_descriptor_slave_cmd_width_adapter:out_startofpacket -> msgdma_1_descriptor_slave_burst_adapter:sink0_startofpacket
	wire          msgdma_1_descriptor_slave_cmd_width_adapter_src_endofpacket;   // msgdma_1_descriptor_slave_cmd_width_adapter:out_endofpacket -> msgdma_1_descriptor_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                         // cmd_mux_004:src_valid -> onchip_memory2_s1_cmd_width_adapter:in_valid
	wire  [161:0] cmd_mux_004_src_data;                                          // cmd_mux_004:src_data -> onchip_memory2_s1_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                         // onchip_memory2_s1_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                       // cmd_mux_004:src_channel -> onchip_memory2_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                 // cmd_mux_004:src_startofpacket -> onchip_memory2_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                   // cmd_mux_004:src_endofpacket -> onchip_memory2_s1_cmd_width_adapter:in_endofpacket
	wire          onchip_memory2_s1_cmd_width_adapter_src_valid;                 // onchip_memory2_s1_cmd_width_adapter:out_valid -> onchip_memory2_s1_burst_adapter:sink0_valid
	wire   [98:0] onchip_memory2_s1_cmd_width_adapter_src_data;                  // onchip_memory2_s1_cmd_width_adapter:out_data -> onchip_memory2_s1_burst_adapter:sink0_data
	wire          onchip_memory2_s1_cmd_width_adapter_src_ready;                 // onchip_memory2_s1_burst_adapter:sink0_ready -> onchip_memory2_s1_cmd_width_adapter:out_ready
	wire    [4:0] onchip_memory2_s1_cmd_width_adapter_src_channel;               // onchip_memory2_s1_cmd_width_adapter:out_channel -> onchip_memory2_s1_burst_adapter:sink0_channel
	wire          onchip_memory2_s1_cmd_width_adapter_src_startofpacket;         // onchip_memory2_s1_cmd_width_adapter:out_startofpacket -> onchip_memory2_s1_burst_adapter:sink0_startofpacket
	wire          onchip_memory2_s1_cmd_width_adapter_src_endofpacket;           // onchip_memory2_s1_cmd_width_adapter:out_endofpacket -> onchip_memory2_s1_burst_adapter:sink0_endofpacket
	wire    [4:0] arria10_hps_h2f_axi_master_wr_limiter_cmd_valid_data;          // arria10_hps_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [4:0] arria10_hps_h2f_axi_master_rd_limiter_cmd_valid_data;          // arria10_hps_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          msgdma_0_csr_agent_rdata_fifo_out_valid;                       // msgdma_0_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] msgdma_0_csr_agent_rdata_fifo_out_data;                        // msgdma_0_csr_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          msgdma_0_csr_agent_rdata_fifo_out_ready;                       // avalon_st_adapter:in_0_ready -> msgdma_0_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                 // avalon_st_adapter:out_0_valid -> msgdma_0_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                  // avalon_st_adapter:out_0_data -> msgdma_0_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                 // msgdma_0_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                 // avalon_st_adapter:out_0_error -> msgdma_0_csr_agent:rdata_fifo_sink_error
	wire          msgdma_1_csr_agent_rdata_fifo_out_valid;                       // msgdma_1_csr_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] msgdma_1_csr_agent_rdata_fifo_out_data;                        // msgdma_1_csr_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          msgdma_1_csr_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_001:in_0_ready -> msgdma_1_csr_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                             // avalon_st_adapter_001:out_0_valid -> msgdma_1_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                              // avalon_st_adapter_001:out_0_data -> msgdma_1_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                             // msgdma_1_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                             // avalon_st_adapter_001:out_0_error -> msgdma_1_csr_agent:rdata_fifo_sink_error
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_out_valid;          // msgdma_0_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire  [129:0] msgdma_0_descriptor_slave_agent_rdata_fifo_out_data;           // msgdma_0_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          msgdma_0_descriptor_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_002:in_0_ready -> msgdma_0_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                             // avalon_st_adapter_002:out_0_valid -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_002_out_0_data;                              // avalon_st_adapter_002:out_0_data -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                             // msgdma_0_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                             // avalon_st_adapter_002:out_0_error -> msgdma_0_descriptor_slave_agent:rdata_fifo_sink_error
	wire          msgdma_1_descriptor_slave_agent_rdata_fifo_out_valid;          // msgdma_1_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire  [129:0] msgdma_1_descriptor_slave_agent_rdata_fifo_out_data;           // msgdma_1_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          msgdma_1_descriptor_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_003:in_0_ready -> msgdma_1_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                             // avalon_st_adapter_003:out_0_valid -> msgdma_1_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_003_out_0_data;                              // avalon_st_adapter_003:out_0_data -> msgdma_1_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                             // msgdma_1_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                             // avalon_st_adapter_003:out_0_error -> msgdma_1_descriptor_slave_agent:rdata_fifo_sink_error
	wire          onchip_memory2_s1_agent_rdata_fifo_out_valid;                  // onchip_memory2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire    [9:0] onchip_memory2_s1_agent_rdata_fifo_out_data;                   // onchip_memory2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          onchip_memory2_s1_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_004:in_0_ready -> onchip_memory2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                             // avalon_st_adapter_004:out_0_valid -> onchip_memory2_s1_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_004_out_0_data;                              // avalon_st_adapter_004:out_0_data -> onchip_memory2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                             // onchip_memory2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                             // avalon_st_adapter_004:out_0_error -> onchip_memory2_s1_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_0_csr_translator (
		.clk                    (clk_100_clk_clk),                                       //                      clk.clk
		.reset                  (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (msgdma_0_csr_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_0_csr_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (msgdma_0_csr_agent_m0_read),                            //                         .read
		.uav_write              (msgdma_0_csr_agent_m0_write),                           //                         .write
		.uav_waitrequest        (msgdma_0_csr_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (msgdma_0_csr_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (msgdma_0_csr_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (msgdma_0_csr_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (msgdma_0_csr_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (msgdma_0_csr_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (msgdma_0_csr_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (msgdma_0_csr_address),                                  //      avalon_anti_slave_0.address
		.av_write               (msgdma_0_csr_write),                                    //                         .write
		.av_read                (msgdma_0_csr_read),                                     //                         .read
		.av_readdata            (msgdma_0_csr_readdata),                                 //                         .readdata
		.av_writedata           (msgdma_0_csr_writedata),                                //                         .writedata
		.av_byteenable          (msgdma_0_csr_byteenable),                               //                         .byteenable
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_1_csr_translator (
		.clk                    (clk_100_clk_clk),                                       //                      clk.clk
		.reset                  (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (msgdma_1_csr_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_1_csr_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (msgdma_1_csr_agent_m0_read),                            //                         .read
		.uav_write              (msgdma_1_csr_agent_m0_write),                           //                         .write
		.uav_waitrequest        (msgdma_1_csr_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (msgdma_1_csr_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (msgdma_1_csr_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (msgdma_1_csr_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (msgdma_1_csr_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (msgdma_1_csr_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (msgdma_1_csr_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (msgdma_1_csr_address),                                  //      avalon_anti_slave_0.address
		.av_write               (msgdma_1_csr_write),                                    //                         .write
		.av_read                (msgdma_1_csr_read),                                     //                         .read
		.av_readdata            (msgdma_1_csr_readdata),                                 //                         .readdata
		.av_writedata           (msgdma_1_csr_writedata),                                //                         .writedata
		.av_byteenable          (msgdma_1_csr_byteenable),                               //                         .byteenable
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_0_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                       //                      clk.clk
		.reset                  (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),                                                                                 //                    reset.reset
		.uav_address            (msgdma_0_descriptor_slave_agent_m0_address),                                                                                            // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_0_descriptor_slave_agent_m0_burstcount),                                                                                         //                         .burstcount
		.uav_read               (msgdma_0_descriptor_slave_agent_m0_read),                                                                                               //                         .read
		.uav_write              (msgdma_0_descriptor_slave_agent_m0_write),                                                                                              //                         .write
		.uav_waitrequest        (msgdma_0_descriptor_slave_agent_m0_waitrequest),                                                                                        //                         .waitrequest
		.uav_readdatavalid      (msgdma_0_descriptor_slave_agent_m0_readdatavalid),                                                                                      //                         .readdatavalid
		.uav_byteenable         (msgdma_0_descriptor_slave_agent_m0_byteenable),                                                                                         //                         .byteenable
		.uav_readdata           (msgdma_0_descriptor_slave_agent_m0_readdata),                                                                                           //                         .readdata
		.uav_writedata          (msgdma_0_descriptor_slave_agent_m0_writedata),                                                                                          //                         .writedata
		.uav_lock               (msgdma_0_descriptor_slave_agent_m0_lock),                                                                                               //                         .lock
		.uav_debugaccess        (msgdma_0_descriptor_slave_agent_m0_debugaccess),                                                                                        //                         .debugaccess
		.av_write               (msgdma_0_descriptor_slave_write),                                                                                                       //      avalon_anti_slave_0.write
		.av_writedata           (msgdma_0_descriptor_slave_writedata),                                                                                                   //                         .writedata
		.av_byteenable          (msgdma_0_descriptor_slave_byteenable),                                                                                                  //                         .byteenable
		.av_waitrequest         (msgdma_0_descriptor_slave_waitrequest),                                                                                                 //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) msgdma_1_descriptor_slave_translator (
		.clk                    (clk_100_clk_clk),                                                                                                                       //                      clk.clk
		.reset                  (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),                                                                                 //                    reset.reset
		.uav_address            (msgdma_1_descriptor_slave_agent_m0_address),                                                                                            // avalon_universal_slave_0.address
		.uav_burstcount         (msgdma_1_descriptor_slave_agent_m0_burstcount),                                                                                         //                         .burstcount
		.uav_read               (msgdma_1_descriptor_slave_agent_m0_read),                                                                                               //                         .read
		.uav_write              (msgdma_1_descriptor_slave_agent_m0_write),                                                                                              //                         .write
		.uav_waitrequest        (msgdma_1_descriptor_slave_agent_m0_waitrequest),                                                                                        //                         .waitrequest
		.uav_readdatavalid      (msgdma_1_descriptor_slave_agent_m0_readdatavalid),                                                                                      //                         .readdatavalid
		.uav_byteenable         (msgdma_1_descriptor_slave_agent_m0_byteenable),                                                                                         //                         .byteenable
		.uav_readdata           (msgdma_1_descriptor_slave_agent_m0_readdata),                                                                                           //                         .readdata
		.uav_writedata          (msgdma_1_descriptor_slave_agent_m0_writedata),                                                                                          //                         .writedata
		.uav_lock               (msgdma_1_descriptor_slave_agent_m0_lock),                                                                                               //                         .lock
		.uav_debugaccess        (msgdma_1_descriptor_slave_agent_m0_debugaccess),                                                                                        //                         .debugaccess
		.av_write               (msgdma_1_descriptor_slave_write),                                                                                                       //      avalon_anti_slave_0.write
		.av_writedata           (msgdma_1_descriptor_slave_writedata),                                                                                                   //                         .writedata
		.av_byteenable          (msgdma_1_descriptor_slave_byteenable),                                                                                                  //                         .byteenable
		.av_waitrequest         (msgdma_1_descriptor_slave_waitrequest),                                                                                                 //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_s1_translator (
		.clk                    (clk_100_clk_clk),                                   //                      clk.clk
		.reset                  (onchip_memory2_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (onchip_memory2_s1_agent_m0_read),                   //                         .read
		.uav_write              (onchip_memory2_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (onchip_memory2_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (onchip_memory2_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (onchip_memory2_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (onchip_memory2_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (onchip_memory2_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (onchip_memory2_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_s1_write),                           //                         .write
		.av_readdata            (onchip_memory2_s1_readdata),                        //                         .readdata
		.av_writedata           (onchip_memory2_s1_writedata),                       //                         .writedata
		.av_chipselect          (onchip_memory2_s1_chipselect),                      //                         .chipselect
		.av_clken               (onchip_memory2_s1_clken),                           //                         .clken
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (4),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (5),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (138),
		.PKT_CACHE_H               (156),
		.PKT_CACHE_L               (153),
		.PKT_ADDR_SIDEBAND_H       (136),
		.PKT_ADDR_SIDEBAND_L       (132),
		.PKT_PROTECTION_H          (152),
		.PKT_PROTECTION_L          (150),
		.PKT_BURST_SIZE_H          (129),
		.PKT_BURST_SIZE_L          (127),
		.PKT_BURST_TYPE_H          (131),
		.PKT_BURST_TYPE_L          (130),
		.PKT_RESPONSE_STATUS_L     (157),
		.PKT_RESPONSE_STATUS_H     (158),
		.PKT_BURSTWRAP_H           (126),
		.PKT_BURSTWRAP_L           (119),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (142),
		.PKT_SRC_ID_L              (140),
		.PKT_DEST_ID_H             (145),
		.PKT_DEST_ID_L             (143),
		.PKT_THREAD_ID_H           (149),
		.PKT_THREAD_ID_L           (146),
		.PKT_QOS_L                 (139),
		.PKT_QOS_H                 (139),
		.PKT_ORI_BURST_SIZE_L      (159),
		.PKT_ORI_BURST_SIZE_H      (161),
		.PKT_DATA_SIDEBAND_H       (137),
		.PKT_DATA_SIDEBAND_L       (137),
		.ST_DATA_W                 (162),
		.ST_CHANNEL_W              (5),
		.ID                        (0)
	) arria10_hps_h2f_axi_master_agent (
		.aclk                   (clk_100_clk_clk),                                             //              clk.clk
		.aresetn                (~arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),      //        clk_reset.reset_n
		.write_cp_valid         (arria10_hps_h2f_axi_master_agent_write_cp_valid),             //         write_cp.valid
		.write_cp_data          (arria10_hps_h2f_axi_master_agent_write_cp_data),              //                 .data
		.write_cp_startofpacket (arria10_hps_h2f_axi_master_agent_write_cp_startofpacket),     //                 .startofpacket
		.write_cp_endofpacket   (arria10_hps_h2f_axi_master_agent_write_cp_endofpacket),       //                 .endofpacket
		.write_cp_ready         (arria10_hps_h2f_axi_master_agent_write_cp_ready),             //                 .ready
		.write_rp_valid         (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_valid),         //         write_rp.valid
		.write_rp_data          (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_data),          //                 .data
		.write_rp_channel       (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_channel),       //                 .channel
		.write_rp_startofpacket (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket), //                 .startofpacket
		.write_rp_endofpacket   (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.write_rp_ready         (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_ready),         //                 .ready
		.read_cp_valid          (arria10_hps_h2f_axi_master_agent_read_cp_valid),              //          read_cp.valid
		.read_cp_data           (arria10_hps_h2f_axi_master_agent_read_cp_data),               //                 .data
		.read_cp_startofpacket  (arria10_hps_h2f_axi_master_agent_read_cp_startofpacket),      //                 .startofpacket
		.read_cp_endofpacket    (arria10_hps_h2f_axi_master_agent_read_cp_endofpacket),        //                 .endofpacket
		.read_cp_ready          (arria10_hps_h2f_axi_master_agent_read_cp_ready),              //                 .ready
		.read_rp_valid          (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_valid),         //          read_rp.valid
		.read_rp_data           (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_data),          //                 .data
		.read_rp_channel        (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_channel),       //                 .channel
		.read_rp_startofpacket  (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket), //                 .startofpacket
		.read_rp_endofpacket    (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.read_rp_ready          (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_ready),         //                 .ready
		.awid                   (arria10_hps_h2f_axi_master_awid),                             // altera_axi_slave.awid
		.awaddr                 (arria10_hps_h2f_axi_master_awaddr),                           //                 .awaddr
		.awlen                  (arria10_hps_h2f_axi_master_awlen),                            //                 .awlen
		.awsize                 (arria10_hps_h2f_axi_master_awsize),                           //                 .awsize
		.awburst                (arria10_hps_h2f_axi_master_awburst),                          //                 .awburst
		.awlock                 (arria10_hps_h2f_axi_master_awlock),                           //                 .awlock
		.awcache                (arria10_hps_h2f_axi_master_awcache),                          //                 .awcache
		.awprot                 (arria10_hps_h2f_axi_master_awprot),                           //                 .awprot
		.awuser                 (arria10_hps_h2f_axi_master_awuser),                           //                 .awuser
		.awvalid                (arria10_hps_h2f_axi_master_awvalid),                          //                 .awvalid
		.awready                (arria10_hps_h2f_axi_master_awready),                          //                 .awready
		.wid                    (arria10_hps_h2f_axi_master_wid),                              //                 .wid
		.wdata                  (arria10_hps_h2f_axi_master_wdata),                            //                 .wdata
		.wstrb                  (arria10_hps_h2f_axi_master_wstrb),                            //                 .wstrb
		.wlast                  (arria10_hps_h2f_axi_master_wlast),                            //                 .wlast
		.wvalid                 (arria10_hps_h2f_axi_master_wvalid),                           //                 .wvalid
		.wready                 (arria10_hps_h2f_axi_master_wready),                           //                 .wready
		.bid                    (arria10_hps_h2f_axi_master_bid),                              //                 .bid
		.bresp                  (arria10_hps_h2f_axi_master_bresp),                            //                 .bresp
		.bvalid                 (arria10_hps_h2f_axi_master_bvalid),                           //                 .bvalid
		.bready                 (arria10_hps_h2f_axi_master_bready),                           //                 .bready
		.arid                   (arria10_hps_h2f_axi_master_arid),                             //                 .arid
		.araddr                 (arria10_hps_h2f_axi_master_araddr),                           //                 .araddr
		.arlen                  (arria10_hps_h2f_axi_master_arlen),                            //                 .arlen
		.arsize                 (arria10_hps_h2f_axi_master_arsize),                           //                 .arsize
		.arburst                (arria10_hps_h2f_axi_master_arburst),                          //                 .arburst
		.arlock                 (arria10_hps_h2f_axi_master_arlock),                           //                 .arlock
		.arcache                (arria10_hps_h2f_axi_master_arcache),                          //                 .arcache
		.arprot                 (arria10_hps_h2f_axi_master_arprot),                           //                 .arprot
		.aruser                 (arria10_hps_h2f_axi_master_aruser),                           //                 .aruser
		.arvalid                (arria10_hps_h2f_axi_master_arvalid),                          //                 .arvalid
		.arready                (arria10_hps_h2f_axi_master_arready),                          //                 .arready
		.rid                    (arria10_hps_h2f_axi_master_rid),                              //                 .rid
		.rdata                  (arria10_hps_h2f_axi_master_rdata),                            //                 .rdata
		.rresp                  (arria10_hps_h2f_axi_master_rresp),                            //                 .rresp
		.rlast                  (arria10_hps_h2f_axi_master_rlast),                            //                 .rlast
		.rvalid                 (arria10_hps_h2f_axi_master_rvalid),                           //                 .rvalid
		.rready                 (arria10_hps_h2f_axi_master_rready),                           //                 .rready
		.awqos                  (4'b0000),                                                     //      (terminated)
		.arqos                  (4'b0000),                                                     //      (terminated)
		.awregion               (4'b0000),                                                     //      (terminated)
		.arregion               (4'b0000),                                                     //      (terminated)
		.wuser                  (1'b0),                                                        //      (terminated)
		.ruser                  (),                                                            //      (terminated)
		.buser                  ()                                                             //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (125),
		.PKT_ORI_BURST_SIZE_L      (123),
		.PKT_RESPONSE_STATUS_H     (122),
		.PKT_RESPONSE_STATUS_L     (121),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (102),
		.PKT_PROTECTION_H          (116),
		.PKT_PROTECTION_L          (114),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (126),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_0_csr_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (msgdma_0_csr_agent_m0_address),                         //              m0.address
		.m0_burstcount           (msgdma_0_csr_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (msgdma_0_csr_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (msgdma_0_csr_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (msgdma_0_csr_agent_m0_lock),                            //                .lock
		.m0_readdata             (msgdma_0_csr_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (msgdma_0_csr_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (msgdma_0_csr_agent_m0_read),                            //                .read
		.m0_waitrequest          (msgdma_0_csr_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (msgdma_0_csr_agent_m0_writedata),                       //                .writedata
		.m0_write                (msgdma_0_csr_agent_m0_write),                           //                .write
		.rp_endofpacket          (msgdma_0_csr_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (msgdma_0_csr_agent_rp_ready),                           //                .ready
		.rp_valid                (msgdma_0_csr_agent_rp_valid),                           //                .valid
		.rp_data                 (msgdma_0_csr_agent_rp_data),                            //                .data
		.rp_startofpacket        (msgdma_0_csr_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (msgdma_0_csr_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (msgdma_0_csr_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (msgdma_0_csr_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (msgdma_0_csr_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (msgdma_0_csr_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (msgdma_0_csr_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (msgdma_0_csr_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (msgdma_0_csr_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (msgdma_0_csr_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (msgdma_0_csr_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (msgdma_0_csr_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (msgdma_0_csr_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (msgdma_0_csr_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (msgdma_0_csr_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (msgdma_0_csr_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (msgdma_0_csr_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (msgdma_0_csr_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_0_csr_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (msgdma_0_csr_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (127),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (msgdma_0_csr_agent_rf_source_data),                     //        in.data
		.in_valid          (msgdma_0_csr_agent_rf_source_valid),                    //          .valid
		.in_ready          (msgdma_0_csr_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (msgdma_0_csr_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (msgdma_0_csr_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (msgdma_0_csr_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (msgdma_0_csr_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (msgdma_0_csr_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (msgdma_0_csr_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (msgdma_0_csr_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_csr_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (msgdma_0_csr_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (msgdma_0_csr_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (msgdma_0_csr_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (msgdma_0_csr_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (msgdma_0_csr_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (msgdma_0_csr_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (125),
		.PKT_ORI_BURST_SIZE_L      (123),
		.PKT_RESPONSE_STATUS_H     (122),
		.PKT_RESPONSE_STATUS_L     (121),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (102),
		.PKT_PROTECTION_H          (116),
		.PKT_PROTECTION_L          (114),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (104),
		.PKT_DEST_ID_H             (109),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (126),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_1_csr_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (msgdma_1_csr_agent_m0_address),                         //              m0.address
		.m0_burstcount           (msgdma_1_csr_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (msgdma_1_csr_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (msgdma_1_csr_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (msgdma_1_csr_agent_m0_lock),                            //                .lock
		.m0_readdata             (msgdma_1_csr_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (msgdma_1_csr_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (msgdma_1_csr_agent_m0_read),                            //                .read
		.m0_waitrequest          (msgdma_1_csr_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (msgdma_1_csr_agent_m0_writedata),                       //                .writedata
		.m0_write                (msgdma_1_csr_agent_m0_write),                           //                .write
		.rp_endofpacket          (msgdma_1_csr_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (msgdma_1_csr_agent_rp_ready),                           //                .ready
		.rp_valid                (msgdma_1_csr_agent_rp_valid),                           //                .valid
		.rp_data                 (msgdma_1_csr_agent_rp_data),                            //                .data
		.rp_startofpacket        (msgdma_1_csr_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (msgdma_1_csr_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (msgdma_1_csr_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (msgdma_1_csr_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (msgdma_1_csr_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (msgdma_1_csr_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (msgdma_1_csr_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (msgdma_1_csr_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (msgdma_1_csr_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (msgdma_1_csr_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (msgdma_1_csr_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (msgdma_1_csr_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (msgdma_1_csr_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (msgdma_1_csr_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (msgdma_1_csr_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (msgdma_1_csr_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (msgdma_1_csr_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (msgdma_1_csr_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_1_csr_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (msgdma_1_csr_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (127),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_1_csr_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (msgdma_1_csr_agent_rf_source_data),                     //        in.data
		.in_valid          (msgdma_1_csr_agent_rf_source_valid),                    //          .valid
		.in_ready          (msgdma_1_csr_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (msgdma_1_csr_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (msgdma_1_csr_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (msgdma_1_csr_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (msgdma_1_csr_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (msgdma_1_csr_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (msgdma_1_csr_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (msgdma_1_csr_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_1_csr_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (msgdma_1_csr_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (msgdma_1_csr_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (msgdma_1_csr_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (msgdma_1_csr_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (msgdma_1_csr_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (msgdma_1_csr_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (233),
		.PKT_ORI_BURST_SIZE_L      (231),
		.PKT_RESPONSE_STATUS_H     (230),
		.PKT_RESPONSE_STATUS_L     (229),
		.PKT_BURST_SIZE_H          (201),
		.PKT_BURST_SIZE_L          (199),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (210),
		.PKT_PROTECTION_H          (224),
		.PKT_PROTECTION_L          (222),
		.PKT_BURSTWRAP_H           (198),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (212),
		.PKT_DEST_ID_H             (217),
		.PKT_DEST_ID_L             (215),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (234),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_0_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                               //             clk.clk
		.reset                   (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (msgdma_0_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (msgdma_0_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (msgdma_0_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (msgdma_0_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (msgdma_0_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (msgdma_0_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (msgdma_0_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (msgdma_0_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (msgdma_0_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (msgdma_0_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (msgdma_0_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (msgdma_0_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (msgdma_0_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (msgdma_0_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (msgdma_0_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (msgdma_0_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (msgdma_0_descriptor_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (msgdma_0_descriptor_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (msgdma_0_descriptor_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (msgdma_0_descriptor_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (msgdma_0_descriptor_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (msgdma_0_descriptor_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (msgdma_0_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (msgdma_0_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (msgdma_0_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (msgdma_0_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (msgdma_0_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (msgdma_0_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (msgdma_0_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (235),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                            //       clk.clk
		.reset             (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (msgdma_0_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_0_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_0_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_0_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_0_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_0_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_0_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_0_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_0_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_0_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_0_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (msgdma_0_descriptor_slave_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (msgdma_0_descriptor_slave_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (msgdma_0_descriptor_slave_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (msgdma_0_descriptor_slave_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (msgdma_0_descriptor_slave_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (msgdma_0_descriptor_slave_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (233),
		.PKT_ORI_BURST_SIZE_L      (231),
		.PKT_RESPONSE_STATUS_H     (230),
		.PKT_RESPONSE_STATUS_L     (229),
		.PKT_BURST_SIZE_H          (201),
		.PKT_BURST_SIZE_L          (199),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (210),
		.PKT_PROTECTION_H          (224),
		.PKT_PROTECTION_L          (222),
		.PKT_BURSTWRAP_H           (198),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (212),
		.PKT_DEST_ID_H             (217),
		.PKT_DEST_ID_L             (215),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (234),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) msgdma_1_descriptor_slave_agent (
		.clk                     (clk_100_clk_clk),                                               //             clk.clk
		.reset                   (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (msgdma_1_descriptor_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (msgdma_1_descriptor_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (msgdma_1_descriptor_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (msgdma_1_descriptor_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (msgdma_1_descriptor_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (msgdma_1_descriptor_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (msgdma_1_descriptor_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (msgdma_1_descriptor_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (msgdma_1_descriptor_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (msgdma_1_descriptor_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (msgdma_1_descriptor_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (msgdma_1_descriptor_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (msgdma_1_descriptor_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (msgdma_1_descriptor_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (msgdma_1_descriptor_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (msgdma_1_descriptor_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (msgdma_1_descriptor_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (msgdma_1_descriptor_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (msgdma_1_descriptor_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (msgdma_1_descriptor_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (msgdma_1_descriptor_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (msgdma_1_descriptor_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (msgdma_1_descriptor_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (msgdma_1_descriptor_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (msgdma_1_descriptor_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (msgdma_1_descriptor_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (msgdma_1_descriptor_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (msgdma_1_descriptor_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (msgdma_1_descriptor_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (msgdma_1_descriptor_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (msgdma_1_descriptor_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (msgdma_1_descriptor_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (msgdma_1_descriptor_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (msgdma_1_descriptor_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (msgdma_1_descriptor_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (235),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_1_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                            //       clk.clk
		.reset             (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (msgdma_1_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (msgdma_1_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (msgdma_1_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (msgdma_1_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (msgdma_1_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (msgdma_1_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (msgdma_1_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (msgdma_1_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (msgdma_1_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (msgdma_1_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) msgdma_1_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                       //       clk.clk
		.reset             (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (msgdma_1_descriptor_slave_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (msgdma_1_descriptor_slave_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (msgdma_1_descriptor_slave_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (msgdma_1_descriptor_slave_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (msgdma_1_descriptor_slave_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (msgdma_1_descriptor_slave_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_s1_agent (
		.clk                     (clk_100_clk_clk),                                       //             clk.clk
		.reset                   (onchip_memory2_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (onchip_memory2_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_memory2_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_memory2_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_memory2_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_memory2_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_memory2_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_memory2_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_memory2_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_memory2_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_memory2_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_memory2_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_memory2_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_memory2_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_memory2_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_memory2_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_memory2_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_memory2_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_memory2_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_memory2_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_memory2_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_memory2_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_memory2_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_memory2_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_memory2_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_memory2_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_memory2_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_memory2_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_memory2_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_memory2_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (onchip_memory2_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_memory2_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_s1_agent_rsp_fifo (
		.clk               (clk_100_clk_clk),                                    //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (onchip_memory2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_s1_agent_rdata_fifo (
		.clk               (clk_100_clk_clk),                                   //       clk.clk
		.reset             (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory2_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (onchip_memory2_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (onchip_memory2_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (onchip_memory2_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (onchip_memory2_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (onchip_memory2_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	a10s_ghrd_altera_merlin_router_181_auphfli router (
		.sink_ready         (arria10_hps_h2f_axi_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (arria10_hps_h2f_axi_master_agent_write_cp_valid),         //          .valid
		.sink_data          (arria10_hps_h2f_axi_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (arria10_hps_h2f_axi_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (arria10_hps_h2f_axi_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                         //       clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_src_ready),                                        //       src.ready
		.src_valid          (router_src_valid),                                        //          .valid
		.src_data           (router_src_data),                                         //          .data
		.src_channel        (router_src_channel),                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //          .endofpacket
	);

	a10s_ghrd_altera_merlin_router_181_auphfli router_001 (
		.sink_ready         (arria10_hps_h2f_axi_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (arria10_hps_h2f_axi_master_agent_read_cp_valid),         //          .valid
		.sink_data          (arria10_hps_h2f_axi_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (arria10_hps_h2f_axi_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (arria10_hps_h2f_axi_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_100_clk_clk),                                        //       clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	a10s_ghrd_altera_merlin_router_181_2zlz57q router_002 (
		.sink_ready         (msgdma_0_csr_agent_rp_ready),                           //      sink.ready
		.sink_valid         (msgdma_0_csr_agent_rp_valid),                           //          .valid
		.sink_data          (msgdma_0_csr_agent_rp_data),                            //          .data
		.sink_startofpacket (msgdma_0_csr_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (msgdma_0_csr_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_100_clk_clk),                                       //       clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                  //       src.ready
		.src_valid          (router_002_src_valid),                                  //          .valid
		.src_data           (router_002_src_data),                                   //          .data
		.src_channel        (router_002_src_channel),                                //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                             //          .endofpacket
	);

	a10s_ghrd_altera_merlin_router_181_2zlz57q router_003 (
		.sink_ready         (msgdma_1_csr_agent_rp_ready),                           //      sink.ready
		.sink_valid         (msgdma_1_csr_agent_rp_valid),                           //          .valid
		.sink_data          (msgdma_1_csr_agent_rp_data),                            //          .data
		.sink_startofpacket (msgdma_1_csr_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (msgdma_1_csr_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (clk_100_clk_clk),                                       //       clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                  //       src.ready
		.src_valid          (router_003_src_valid),                                  //          .valid
		.src_data           (router_003_src_data),                                   //          .data
		.src_channel        (router_003_src_channel),                                //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                             //          .endofpacket
	);

	a10s_ghrd_altera_merlin_router_181_iu4vioy router_004 (
		.sink_ready         (msgdma_0_descriptor_slave_agent_rp_ready),              //      sink.ready
		.sink_valid         (msgdma_0_descriptor_slave_agent_rp_valid),              //          .valid
		.sink_data          (msgdma_0_descriptor_slave_agent_rp_data),               //          .data
		.sink_startofpacket (msgdma_0_descriptor_slave_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (msgdma_0_descriptor_slave_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_100_clk_clk),                                       //       clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                  //       src.ready
		.src_valid          (router_004_src_valid),                                  //          .valid
		.src_data           (router_004_src_data),                                   //          .data
		.src_channel        (router_004_src_channel),                                //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                             //          .endofpacket
	);

	a10s_ghrd_altera_merlin_router_181_iu4vioy router_005 (
		.sink_ready         (msgdma_1_descriptor_slave_agent_rp_ready),              //      sink.ready
		.sink_valid         (msgdma_1_descriptor_slave_agent_rp_valid),              //          .valid
		.sink_data          (msgdma_1_descriptor_slave_agent_rp_data),               //          .data
		.sink_startofpacket (msgdma_1_descriptor_slave_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (msgdma_1_descriptor_slave_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_100_clk_clk),                                       //       clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                  //       src.ready
		.src_valid          (router_005_src_valid),                                  //          .valid
		.src_data           (router_005_src_data),                                   //          .data
		.src_channel        (router_005_src_channel),                                //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                             //          .endofpacket
	);

	a10s_ghrd_altera_merlin_router_181_3swwdhq router_006 (
		.sink_ready         (onchip_memory2_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (onchip_memory2_s1_agent_rp_valid),                  //          .valid
		.sink_data          (onchip_memory2_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (onchip_memory2_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (onchip_memory2_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_100_clk_clk),                                   //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                              //       src.ready
		.src_valid          (router_006_src_valid),                              //          .valid
		.src_data           (router_006_src_data),                               //          .data
		.src_channel        (router_006_src_channel),                            //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                         //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (145),
		.PKT_DEST_ID_L             (143),
		.PKT_SRC_ID_H              (142),
		.PKT_SRC_ID_L              (140),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (162),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arria10_hps_h2f_axi_master_wr_limiter (
		.clk                    (clk_100_clk_clk),                                             //       clk.clk
		.reset                  (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                            //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                            //          .valid
		.cmd_sink_data          (router_src_data),                                             //          .data
		.cmd_sink_channel       (router_src_channel),                                          //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                    //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                      //          .endofpacket
		.cmd_src_ready          (arria10_hps_h2f_axi_master_wr_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (arria10_hps_h2f_axi_master_wr_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (arria10_hps_h2f_axi_master_wr_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (arria10_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (arria10_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                           //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                         //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                            //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                     //          .endofpacket
		.rsp_src_ready          (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (arria10_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (arria10_hps_h2f_axi_master_wr_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (145),
		.PKT_DEST_ID_L             (143),
		.PKT_SRC_ID_H              (142),
		.PKT_SRC_ID_L              (140),
		.PKT_BYTE_CNT_H            (118),
		.PKT_BYTE_CNT_L            (110),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (162),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arria10_hps_h2f_axi_master_rd_limiter (
		.clk                    (clk_100_clk_clk),                                             //       clk.clk
		.reset                  (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                        //          .valid
		.cmd_sink_data          (router_001_src_data),                                         //          .data
		.cmd_sink_channel       (router_001_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (arria10_hps_h2f_axi_master_rd_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (arria10_hps_h2f_axi_master_rd_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (arria10_hps_h2f_axi_master_rd_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (arria10_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (arria10_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (arria10_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (arria10_hps_h2f_axi_master_rd_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (102),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (126),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) msgdma_0_csr_burst_adapter (
		.clk                   (clk_100_clk_clk),                                       //       cr0.clk
		.reset                 (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (msgdma_0_csr_cmd_width_adapter_src_valid),              //     sink0.valid
		.sink0_data            (msgdma_0_csr_cmd_width_adapter_src_data),               //          .data
		.sink0_channel         (msgdma_0_csr_cmd_width_adapter_src_channel),            //          .channel
		.sink0_startofpacket   (msgdma_0_csr_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (msgdma_0_csr_cmd_width_adapter_src_endofpacket),        //          .endofpacket
		.sink0_ready           (msgdma_0_csr_cmd_width_adapter_src_ready),              //          .ready
		.source0_valid         (msgdma_0_csr_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (msgdma_0_csr_burst_adapter_source0_data),               //          .data
		.source0_channel       (msgdma_0_csr_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (msgdma_0_csr_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (msgdma_0_csr_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (msgdma_0_csr_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (102),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (93),
		.PKT_BURST_SIZE_L          (91),
		.PKT_BURST_TYPE_H          (95),
		.PKT_BURST_TYPE_L          (94),
		.PKT_BURSTWRAP_H           (90),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (126),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (90),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) msgdma_1_csr_burst_adapter (
		.clk                   (clk_100_clk_clk),                                       //       cr0.clk
		.reset                 (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (msgdma_1_csr_cmd_width_adapter_src_valid),              //     sink0.valid
		.sink0_data            (msgdma_1_csr_cmd_width_adapter_src_data),               //          .data
		.sink0_channel         (msgdma_1_csr_cmd_width_adapter_src_channel),            //          .channel
		.sink0_startofpacket   (msgdma_1_csr_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.sink0_endofpacket     (msgdma_1_csr_cmd_width_adapter_src_endofpacket),        //          .endofpacket
		.sink0_ready           (msgdma_1_csr_cmd_width_adapter_src_ready),              //          .ready
		.source0_valid         (msgdma_1_csr_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (msgdma_1_csr_burst_adapter_source0_data),               //          .data
		.source0_channel       (msgdma_1_csr_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (msgdma_1_csr_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (msgdma_1_csr_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (msgdma_1_csr_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (210),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (201),
		.PKT_BURST_SIZE_L          (199),
		.PKT_BURST_TYPE_H          (203),
		.PKT_BURST_TYPE_L          (202),
		.PKT_BURSTWRAP_H           (198),
		.PKT_BURSTWRAP_L           (191),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (234),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (186),
		.OUT_BURSTWRAP_H           (198),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) msgdma_0_descriptor_slave_burst_adapter (
		.clk                   (clk_100_clk_clk),                                               //       cr0.clk
		.reset                 (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (msgdma_0_descriptor_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (msgdma_0_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (msgdma_0_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (msgdma_0_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (msgdma_0_descriptor_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (msgdma_0_descriptor_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (msgdma_0_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (msgdma_0_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (msgdma_0_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (msgdma_0_descriptor_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (210),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (201),
		.PKT_BURST_SIZE_L          (199),
		.PKT_BURST_TYPE_H          (203),
		.PKT_BURST_TYPE_L          (202),
		.PKT_BURSTWRAP_H           (198),
		.PKT_BURSTWRAP_L           (191),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (234),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (186),
		.OUT_BURSTWRAP_H           (198),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) msgdma_1_descriptor_slave_burst_adapter (
		.clk                   (clk_100_clk_clk),                                               //       cr0.clk
		.reset                 (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (msgdma_1_descriptor_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (msgdma_1_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (msgdma_1_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (msgdma_1_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (msgdma_1_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (msgdma_1_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (msgdma_1_descriptor_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (msgdma_1_descriptor_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (msgdma_1_descriptor_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (msgdma_1_descriptor_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (msgdma_1_descriptor_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (msgdma_1_descriptor_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (75),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_BURST_TYPE_H          (68),
		.PKT_BURST_TYPE_L          (67),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (56),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (63),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) onchip_memory2_s1_burst_adapter (
		.clk                   (clk_100_clk_clk),                                       //       cr0.clk
		.reset                 (onchip_memory2_reset1_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (onchip_memory2_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (onchip_memory2_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (onchip_memory2_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (onchip_memory2_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (onchip_memory2_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (onchip_memory2_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (onchip_memory2_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_memory2_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_memory2_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_memory2_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_memory2_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_memory2_s1_burst_adapter_source0_ready)          //          .ready
	);

	a10s_ghrd_altera_merlin_demultiplexer_181_usppnsi cmd_demux (
		.clk                (clk_100_clk_clk),                                             //        clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready         (arria10_hps_h2f_axi_master_wr_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (arria10_hps_h2f_axi_master_wr_limiter_cmd_src_channel),       //           .channel
		.sink_data          (arria10_hps_h2f_axi_master_wr_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (arria10_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (arria10_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (arria10_hps_h2f_axi_master_wr_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                        //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                        //           .valid
		.src0_data          (cmd_demux_src0_data),                                         //           .data
		.src0_channel       (cmd_demux_src0_channel),                                      //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                  //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                        //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                        //           .valid
		.src1_data          (cmd_demux_src1_data),                                         //           .data
		.src1_channel       (cmd_demux_src1_channel),                                      //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                  //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                        //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                        //           .valid
		.src2_data          (cmd_demux_src2_data),                                         //           .data
		.src2_channel       (cmd_demux_src2_channel),                                      //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                  //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                        //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                        //           .valid
		.src3_data          (cmd_demux_src3_data),                                         //           .data
		.src3_channel       (cmd_demux_src3_channel),                                      //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                  //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                        //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                        //           .valid
		.src4_data          (cmd_demux_src4_data),                                         //           .data
		.src4_channel       (cmd_demux_src4_channel),                                      //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                                   //           .endofpacket
	);

	a10s_ghrd_altera_merlin_demultiplexer_181_usppnsi cmd_demux_001 (
		.clk                (clk_100_clk_clk),                                             //        clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready         (arria10_hps_h2f_axi_master_rd_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (arria10_hps_h2f_axi_master_rd_limiter_cmd_src_channel),       //           .channel
		.sink_data          (arria10_hps_h2f_axi_master_rd_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (arria10_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (arria10_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (arria10_hps_h2f_axi_master_rd_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                    //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                    //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                     //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                  //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                              //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                    //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                    //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                     //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                  //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                              //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                    //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                    //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                     //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                  //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                            //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                              //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                    //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                    //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                     //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                  //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                            //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                              //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                    //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                    //           .valid
		.src4_data          (cmd_demux_001_src4_data),                                     //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                  //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                            //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                               //           .endofpacket
	);

	a10s_ghrd_altera_merlin_multiplexer_181_rfgns6y cmd_mux (
		.clk                 (clk_100_clk_clk),                                       //       clk.clk
		.reset               (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_src_valid),                                     //          .valid
		.src_data            (cmd_mux_src_data),                                      //          .data
		.src_channel         (cmd_mux_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                //          .channel
		.sink0_data          (cmd_demux_src0_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                         //          .endofpacket
	);

	a10s_ghrd_altera_merlin_multiplexer_181_rfgns6y cmd_mux_001 (
		.clk                 (clk_100_clk_clk),                                       //       clk.clk
		.reset               (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                 //          .valid
		.src_data            (cmd_mux_001_src_data),                                  //          .data
		.src_channel         (cmd_mux_001_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                //          .channel
		.sink0_data          (cmd_demux_src1_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                         //          .endofpacket
	);

	a10s_ghrd_altera_merlin_multiplexer_181_rfgns6y cmd_mux_002 (
		.clk                 (clk_100_clk_clk),                                       //       clk.clk
		.reset               (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                 //          .valid
		.src_data            (cmd_mux_002_src_data),                                  //          .data
		.src_channel         (cmd_mux_002_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                //          .channel
		.sink0_data          (cmd_demux_src2_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                         //          .endofpacket
	);

	a10s_ghrd_altera_merlin_multiplexer_181_rfgns6y cmd_mux_003 (
		.clk                 (clk_100_clk_clk),                                       //       clk.clk
		.reset               (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                 //          .valid
		.src_data            (cmd_mux_003_src_data),                                  //          .data
		.src_channel         (cmd_mux_003_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                //          .channel
		.sink0_data          (cmd_demux_src3_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                              //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                            //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                               //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                         //          .endofpacket
	);

	a10s_ghrd_altera_merlin_multiplexer_181_rfgns6y cmd_mux_004 (
		.clk                 (clk_100_clk_clk),                                   //       clk.clk
		.reset               (onchip_memory2_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                             //          .valid
		.src_data            (cmd_mux_004_src_data),                              //          .data
		.src_channel         (cmd_mux_004_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                            //          .channel
		.sink0_data          (cmd_demux_src4_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                     //          .endofpacket
	);

	a10s_ghrd_altera_merlin_demultiplexer_181_allua7a rsp_demux (
		.clk                (clk_100_clk_clk),                                       //       clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (msgdma_0_csr_rsp_width_adapter_src_ready),              //      sink.ready
		.sink_channel       (msgdma_0_csr_rsp_width_adapter_src_channel),            //          .channel
		.sink_data          (msgdma_0_csr_rsp_width_adapter_src_data),               //          .data
		.sink_startofpacket (msgdma_0_csr_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.sink_endofpacket   (msgdma_0_csr_rsp_width_adapter_src_endofpacket),        //          .endofpacket
		.sink_valid         (msgdma_0_csr_rsp_width_adapter_src_valid),              //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                             //          .endofpacket
	);

	a10s_ghrd_altera_merlin_demultiplexer_181_allua7a rsp_demux_001 (
		.clk                (clk_100_clk_clk),                                       //       clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (msgdma_1_csr_rsp_width_adapter_src_ready),              //      sink.ready
		.sink_channel       (msgdma_1_csr_rsp_width_adapter_src_channel),            //          .channel
		.sink_data          (msgdma_1_csr_rsp_width_adapter_src_data),               //          .data
		.sink_startofpacket (msgdma_1_csr_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.sink_endofpacket   (msgdma_1_csr_rsp_width_adapter_src_endofpacket),        //          .endofpacket
		.sink_valid         (msgdma_1_csr_rsp_width_adapter_src_valid),              //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_001_src0_data),                               //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_001_src1_data),                               //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                         //          .endofpacket
	);

	a10s_ghrd_altera_merlin_demultiplexer_181_allua7a rsp_demux_002 (
		.clk                (clk_100_clk_clk),                                               //       clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (msgdma_0_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (msgdma_0_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (msgdma_0_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (msgdma_0_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_0_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (msgdma_0_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                                 //          .endofpacket
	);

	a10s_ghrd_altera_merlin_demultiplexer_181_allua7a rsp_demux_003 (
		.clk                (clk_100_clk_clk),                                               //       clk.clk
		.reset              (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (msgdma_1_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (msgdma_1_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (msgdma_1_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (msgdma_1_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (msgdma_1_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (msgdma_1_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                                 //          .endofpacket
	);

	a10s_ghrd_altera_merlin_demultiplexer_181_allua7a rsp_demux_004 (
		.clk                (clk_100_clk_clk),                                       //       clk.clk
		.reset              (onchip_memory2_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (onchip_memory2_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (onchip_memory2_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (onchip_memory2_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (onchip_memory2_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (onchip_memory2_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (onchip_memory2_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_004_src0_data),                               //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                              //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                              //          .valid
		.src1_data          (rsp_demux_004_src1_data),                               //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                            //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                         //          .endofpacket
	);

	a10s_ghrd_altera_merlin_multiplexer_181_q5ittfq rsp_mux (
		.clk                 (clk_100_clk_clk),                                       //       clk.clk
		.reset               (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                                     //          .valid
		.src_data            (rsp_mux_src_data),                                      //          .data
		.src_channel         (rsp_mux_src_channel),                                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                  //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                  //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                //          .channel
		.sink0_data          (rsp_demux_src0_data),                                   //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                            //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                              //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                              //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                            //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                               //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                        //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                              //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                              //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                            //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                               //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                        //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                              //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                              //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                            //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                               //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                      //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                        //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                              //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                              //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                            //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                               //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                      //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)                         //          .endofpacket
	);

	a10s_ghrd_altera_merlin_multiplexer_181_q5ittfq rsp_mux_001 (
		.clk                 (clk_100_clk_clk),                                       //       clk.clk
		.reset               (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                 //          .valid
		.src_data            (rsp_mux_001_src_data),                                  //          .data
		.src_channel         (rsp_mux_001_src_channel),                               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                  //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                  //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                //          .channel
		.sink0_data          (rsp_demux_src1_data),                                   //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                            //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                              //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                              //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                            //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                               //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                        //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                              //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                              //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                            //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                               //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                        //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                              //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                              //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                            //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                               //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                      //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),                        //          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                              //     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                              //          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                            //          .channel
		.sink4_data          (rsp_demux_004_src1_data),                               //          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),                      //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket)                         //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (90),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (93),
		.IN_PKT_BURST_SIZE_L           (91),
		.IN_PKT_RESPONSE_STATUS_H      (122),
		.IN_PKT_RESPONSE_STATUS_L      (121),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (95),
		.IN_PKT_BURST_TYPE_L           (94),
		.IN_PKT_ORI_BURST_SIZE_L       (123),
		.IN_PKT_ORI_BURST_SIZE_H       (125),
		.IN_ST_DATA_W                  (126),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (129),
		.OUT_PKT_BURST_SIZE_L          (127),
		.OUT_PKT_RESPONSE_STATUS_H     (158),
		.OUT_PKT_RESPONSE_STATUS_L     (157),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (131),
		.OUT_PKT_BURST_TYPE_L          (130),
		.OUT_PKT_ORI_BURST_SIZE_L      (159),
		.OUT_PKT_ORI_BURST_SIZE_H      (161),
		.OUT_ST_DATA_W                 (162),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) msgdma_0_csr_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                       //       clk.clk
		.reset                (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_002_src_valid),                                  //      sink.valid
		.in_channel           (router_002_src_channel),                                //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_002_src_ready),                                  //          .ready
		.in_data              (router_002_src_data),                                   //          .data
		.out_endofpacket      (msgdma_0_csr_rsp_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (msgdma_0_csr_rsp_width_adapter_src_data),               //          .data
		.out_channel          (msgdma_0_csr_rsp_width_adapter_src_channel),            //          .channel
		.out_valid            (msgdma_0_csr_rsp_width_adapter_src_valid),              //          .valid
		.out_ready            (msgdma_0_csr_rsp_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (msgdma_0_csr_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (90),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (93),
		.IN_PKT_BURST_SIZE_L           (91),
		.IN_PKT_RESPONSE_STATUS_H      (122),
		.IN_PKT_RESPONSE_STATUS_L      (121),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (95),
		.IN_PKT_BURST_TYPE_L           (94),
		.IN_PKT_ORI_BURST_SIZE_L       (123),
		.IN_PKT_ORI_BURST_SIZE_H       (125),
		.IN_ST_DATA_W                  (126),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (129),
		.OUT_PKT_BURST_SIZE_L          (127),
		.OUT_PKT_RESPONSE_STATUS_H     (158),
		.OUT_PKT_RESPONSE_STATUS_L     (157),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (131),
		.OUT_PKT_BURST_TYPE_L          (130),
		.OUT_PKT_ORI_BURST_SIZE_L      (159),
		.OUT_PKT_ORI_BURST_SIZE_H      (161),
		.OUT_ST_DATA_W                 (162),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) msgdma_1_csr_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                       //       clk.clk
		.reset                (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_003_src_valid),                                  //      sink.valid
		.in_channel           (router_003_src_channel),                                //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_003_src_ready),                                  //          .ready
		.in_data              (router_003_src_data),                                   //          .data
		.out_endofpacket      (msgdma_1_csr_rsp_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (msgdma_1_csr_rsp_width_adapter_src_data),               //          .data
		.out_channel          (msgdma_1_csr_rsp_width_adapter_src_channel),            //          .channel
		.out_valid            (msgdma_1_csr_rsp_width_adapter_src_valid),              //          .valid
		.out_ready            (msgdma_1_csr_rsp_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (msgdma_1_csr_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (198),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (201),
		.IN_PKT_BURST_SIZE_L           (199),
		.IN_PKT_RESPONSE_STATUS_H      (230),
		.IN_PKT_RESPONSE_STATUS_L      (229),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (203),
		.IN_PKT_BURST_TYPE_L           (202),
		.IN_PKT_ORI_BURST_SIZE_L       (231),
		.IN_PKT_ORI_BURST_SIZE_H       (233),
		.IN_ST_DATA_W                  (234),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (129),
		.OUT_PKT_BURST_SIZE_L          (127),
		.OUT_PKT_RESPONSE_STATUS_H     (158),
		.OUT_PKT_RESPONSE_STATUS_L     (157),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (131),
		.OUT_PKT_BURST_TYPE_L          (130),
		.OUT_PKT_ORI_BURST_SIZE_L      (159),
		.OUT_PKT_ORI_BURST_SIZE_H      (161),
		.OUT_ST_DATA_W                 (162),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) msgdma_0_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                               //       clk.clk
		.reset                (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_004_src_valid),                                          //      sink.valid
		.in_channel           (router_004_src_channel),                                        //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                                    //          .endofpacket
		.in_ready             (router_004_src_ready),                                          //          .ready
		.in_data              (router_004_src_data),                                           //          .data
		.out_endofpacket      (msgdma_0_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (msgdma_0_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (msgdma_0_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (msgdma_0_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (msgdma_0_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (msgdma_0_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (198),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (201),
		.IN_PKT_BURST_SIZE_L           (199),
		.IN_PKT_RESPONSE_STATUS_H      (230),
		.IN_PKT_RESPONSE_STATUS_L      (229),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (203),
		.IN_PKT_BURST_TYPE_L           (202),
		.IN_PKT_ORI_BURST_SIZE_L       (231),
		.IN_PKT_ORI_BURST_SIZE_H       (233),
		.IN_ST_DATA_W                  (234),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (129),
		.OUT_PKT_BURST_SIZE_L          (127),
		.OUT_PKT_RESPONSE_STATUS_H     (158),
		.OUT_PKT_RESPONSE_STATUS_L     (157),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (131),
		.OUT_PKT_BURST_TYPE_L          (130),
		.OUT_PKT_ORI_BURST_SIZE_L      (159),
		.OUT_PKT_ORI_BURST_SIZE_H      (161),
		.OUT_ST_DATA_W                 (162),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) msgdma_1_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                               //       clk.clk
		.reset                (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_005_src_valid),                                          //      sink.valid
		.in_channel           (router_005_src_channel),                                        //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                    //          .endofpacket
		.in_ready             (router_005_src_ready),                                          //          .ready
		.in_data              (router_005_src_data),                                           //          .data
		.out_endofpacket      (msgdma_1_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (msgdma_1_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (msgdma_1_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (msgdma_1_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (msgdma_1_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (msgdma_1_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (63),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (66),
		.IN_PKT_BURST_SIZE_L           (64),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (68),
		.IN_PKT_BURST_TYPE_L           (67),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (118),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (129),
		.OUT_PKT_BURST_SIZE_L          (127),
		.OUT_PKT_RESPONSE_STATUS_H     (158),
		.OUT_PKT_RESPONSE_STATUS_L     (157),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (131),
		.OUT_PKT_BURST_TYPE_L          (130),
		.OUT_PKT_ORI_BURST_SIZE_L      (159),
		.OUT_PKT_ORI_BURST_SIZE_H      (161),
		.OUT_ST_DATA_W                 (162),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_memory2_s1_rsp_width_adapter (
		.clk                  (clk_100_clk_clk),                                       //       clk.clk
		.reset                (onchip_memory2_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_006_src_valid),                                  //      sink.valid
		.in_channel           (router_006_src_channel),                                //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                            //          .endofpacket
		.in_ready             (router_006_src_ready),                                  //          .ready
		.in_data              (router_006_src_data),                                   //          .data
		.out_endofpacket      (onchip_memory2_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (126),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (129),
		.IN_PKT_BURST_SIZE_L           (127),
		.IN_PKT_RESPONSE_STATUS_H      (158),
		.IN_PKT_RESPONSE_STATUS_L      (157),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (131),
		.IN_PKT_BURST_TYPE_L           (130),
		.IN_PKT_ORI_BURST_SIZE_L       (159),
		.IN_PKT_ORI_BURST_SIZE_H       (161),
		.IN_ST_DATA_W                  (162),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (93),
		.OUT_PKT_BURST_SIZE_L          (91),
		.OUT_PKT_RESPONSE_STATUS_H     (122),
		.OUT_PKT_RESPONSE_STATUS_L     (121),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (95),
		.OUT_PKT_BURST_TYPE_L          (94),
		.OUT_PKT_ORI_BURST_SIZE_L      (123),
		.OUT_PKT_ORI_BURST_SIZE_H      (125),
		.OUT_ST_DATA_W                 (126),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) msgdma_0_csr_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                       //       clk.clk
		.reset                (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                     //          .ready
		.in_data              (cmd_mux_src_data),                                      //          .data
		.out_endofpacket      (msgdma_0_csr_cmd_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (msgdma_0_csr_cmd_width_adapter_src_data),               //          .data
		.out_channel          (msgdma_0_csr_cmd_width_adapter_src_channel),            //          .channel
		.out_valid            (msgdma_0_csr_cmd_width_adapter_src_valid),              //          .valid
		.out_ready            (msgdma_0_csr_cmd_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (msgdma_0_csr_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (126),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (129),
		.IN_PKT_BURST_SIZE_L           (127),
		.IN_PKT_RESPONSE_STATUS_H      (158),
		.IN_PKT_RESPONSE_STATUS_L      (157),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (131),
		.IN_PKT_BURST_TYPE_L           (130),
		.IN_PKT_ORI_BURST_SIZE_L       (159),
		.IN_PKT_ORI_BURST_SIZE_H       (161),
		.IN_ST_DATA_W                  (162),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (93),
		.OUT_PKT_BURST_SIZE_L          (91),
		.OUT_PKT_RESPONSE_STATUS_H     (122),
		.OUT_PKT_RESPONSE_STATUS_L     (121),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (95),
		.OUT_PKT_BURST_TYPE_L          (94),
		.OUT_PKT_ORI_BURST_SIZE_L      (123),
		.OUT_PKT_ORI_BURST_SIZE_H      (125),
		.OUT_ST_DATA_W                 (126),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) msgdma_1_csr_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                       //       clk.clk
		.reset                (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                 //          .ready
		.in_data              (cmd_mux_001_src_data),                                  //          .data
		.out_endofpacket      (msgdma_1_csr_cmd_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (msgdma_1_csr_cmd_width_adapter_src_data),               //          .data
		.out_channel          (msgdma_1_csr_cmd_width_adapter_src_channel),            //          .channel
		.out_valid            (msgdma_1_csr_cmd_width_adapter_src_valid),              //          .valid
		.out_ready            (msgdma_1_csr_cmd_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (msgdma_1_csr_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (126),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (129),
		.IN_PKT_BURST_SIZE_L           (127),
		.IN_PKT_RESPONSE_STATUS_H      (158),
		.IN_PKT_RESPONSE_STATUS_L      (157),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (131),
		.IN_PKT_BURST_TYPE_L           (130),
		.IN_PKT_ORI_BURST_SIZE_L       (159),
		.IN_PKT_ORI_BURST_SIZE_H       (161),
		.IN_ST_DATA_W                  (162),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (201),
		.OUT_PKT_BURST_SIZE_L          (199),
		.OUT_PKT_RESPONSE_STATUS_H     (230),
		.OUT_PKT_RESPONSE_STATUS_L     (229),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (203),
		.OUT_PKT_BURST_TYPE_L          (202),
		.OUT_PKT_ORI_BURST_SIZE_L      (231),
		.OUT_PKT_ORI_BURST_SIZE_H      (233),
		.OUT_ST_DATA_W                 (234),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) msgdma_0_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                               //       clk.clk
		.reset                (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                         //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                       //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                         //          .ready
		.in_data              (cmd_mux_002_src_data),                                          //          .data
		.out_endofpacket      (msgdma_0_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (msgdma_0_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (msgdma_0_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (msgdma_0_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (msgdma_0_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (msgdma_0_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (126),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (129),
		.IN_PKT_BURST_SIZE_L           (127),
		.IN_PKT_RESPONSE_STATUS_H      (158),
		.IN_PKT_RESPONSE_STATUS_L      (157),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (131),
		.IN_PKT_BURST_TYPE_L           (130),
		.IN_PKT_ORI_BURST_SIZE_L       (159),
		.IN_PKT_ORI_BURST_SIZE_H       (161),
		.IN_ST_DATA_W                  (162),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (201),
		.OUT_PKT_BURST_SIZE_L          (199),
		.OUT_PKT_RESPONSE_STATUS_H     (230),
		.OUT_PKT_RESPONSE_STATUS_L     (229),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (203),
		.OUT_PKT_BURST_TYPE_L          (202),
		.OUT_PKT_ORI_BURST_SIZE_L      (231),
		.OUT_PKT_ORI_BURST_SIZE_H      (233),
		.OUT_ST_DATA_W                 (234),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) msgdma_1_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                               //       clk.clk
		.reset                (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                         //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                       //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                         //          .ready
		.in_data              (cmd_mux_003_src_data),                                          //          .data
		.out_endofpacket      (msgdma_1_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (msgdma_1_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (msgdma_1_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (msgdma_1_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (msgdma_1_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (msgdma_1_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (118),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (126),
		.IN_PKT_BURSTWRAP_L            (119),
		.IN_PKT_BURST_SIZE_H           (129),
		.IN_PKT_BURST_SIZE_L           (127),
		.IN_PKT_RESPONSE_STATUS_H      (158),
		.IN_PKT_RESPONSE_STATUS_L      (157),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (131),
		.IN_PKT_BURST_TYPE_L           (130),
		.IN_PKT_ORI_BURST_SIZE_L       (159),
		.IN_PKT_ORI_BURST_SIZE_H       (161),
		.IN_ST_DATA_W                  (162),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (66),
		.OUT_PKT_BURST_SIZE_L          (64),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (68),
		.OUT_PKT_BURST_TYPE_L          (67),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_memory2_s1_cmd_width_adapter (
		.clk                  (clk_100_clk_clk),                                       //       clk.clk
		.reset                (onchip_memory2_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                 //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                               //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                           //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                 //          .ready
		.in_data              (cmd_mux_004_src_data),                                  //          .data
		.out_endofpacket      (onchip_memory2_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_memory2_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (onchip_memory2_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_memory2_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_memory2_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_memory2_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                 // (terminated)
	);

	a10s_ghrd_altera_avalon_st_adapter_181_bbfziwi #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_100_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (msgdma_0_csr_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (msgdma_0_csr_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (msgdma_0_csr_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                          //         .error
	);

	a10s_ghrd_altera_avalon_st_adapter_181_bbfziwi #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_100_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (msgdma_1_csr_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (msgdma_1_csr_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (msgdma_1_csr_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

	a10s_ghrd_altera_avalon_st_adapter_181_fme5yhq #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_100_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (msgdma_0_descriptor_slave_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (msgdma_0_descriptor_slave_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (msgdma_0_descriptor_slave_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                      //         .error
	);

	a10s_ghrd_altera_avalon_st_adapter_181_fme5yhq #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_100_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (arria10_hps_h2f_axi_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (msgdma_1_descriptor_slave_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (msgdma_1_descriptor_slave_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (msgdma_1_descriptor_slave_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                      //         .error
	);

	a10s_ghrd_altera_avalon_st_adapter_181_sc7osri #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_100_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (onchip_memory2_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (onchip_memory2_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (onchip_memory2_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                  //         .error
	);

endmodule
